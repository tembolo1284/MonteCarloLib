// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mcoptions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mcoptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mcoptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mcoptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mcoptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mcoptions_2eproto;
namespace mcoptions {
class AmericanRequest;
class AmericanRequestDefaultTypeInternal;
extern AmericanRequestDefaultTypeInternal _AmericanRequest_default_instance_;
class AsianRequest;
class AsianRequestDefaultTypeInternal;
extern AsianRequestDefaultTypeInternal _AsianRequest_default_instance_;
class BarrierRequest;
class BarrierRequestDefaultTypeInternal;
extern BarrierRequestDefaultTypeInternal _BarrierRequest_default_instance_;
class BatchRequest;
class BatchRequestDefaultTypeInternal;
extern BatchRequestDefaultTypeInternal _BatchRequest_default_instance_;
class BatchResponse;
class BatchResponseDefaultTypeInternal;
extern BatchResponseDefaultTypeInternal _BatchResponse_default_instance_;
class BermudanRequest;
class BermudanRequestDefaultTypeInternal;
extern BermudanRequestDefaultTypeInternal _BermudanRequest_default_instance_;
class EuropeanRequest;
class EuropeanRequestDefaultTypeInternal;
extern EuropeanRequestDefaultTypeInternal _EuropeanRequest_default_instance_;
class LookbackRequest;
class LookbackRequestDefaultTypeInternal;
extern LookbackRequestDefaultTypeInternal _LookbackRequest_default_instance_;
class PriceResponse;
class PriceResponseDefaultTypeInternal;
extern PriceResponseDefaultTypeInternal _PriceResponse_default_instance_;
class SimulationConfig;
class SimulationConfigDefaultTypeInternal;
extern SimulationConfigDefaultTypeInternal _SimulationConfig_default_instance_;
}  // namespace mcoptions
PROTOBUF_NAMESPACE_OPEN
template<> ::mcoptions::AmericanRequest* Arena::CreateMaybeMessage<::mcoptions::AmericanRequest>(Arena*);
template<> ::mcoptions::AsianRequest* Arena::CreateMaybeMessage<::mcoptions::AsianRequest>(Arena*);
template<> ::mcoptions::BarrierRequest* Arena::CreateMaybeMessage<::mcoptions::BarrierRequest>(Arena*);
template<> ::mcoptions::BatchRequest* Arena::CreateMaybeMessage<::mcoptions::BatchRequest>(Arena*);
template<> ::mcoptions::BatchResponse* Arena::CreateMaybeMessage<::mcoptions::BatchResponse>(Arena*);
template<> ::mcoptions::BermudanRequest* Arena::CreateMaybeMessage<::mcoptions::BermudanRequest>(Arena*);
template<> ::mcoptions::EuropeanRequest* Arena::CreateMaybeMessage<::mcoptions::EuropeanRequest>(Arena*);
template<> ::mcoptions::LookbackRequest* Arena::CreateMaybeMessage<::mcoptions::LookbackRequest>(Arena*);
template<> ::mcoptions::PriceResponse* Arena::CreateMaybeMessage<::mcoptions::PriceResponse>(Arena*);
template<> ::mcoptions::SimulationConfig* Arena::CreateMaybeMessage<::mcoptions::SimulationConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mcoptions {

enum BarrierType : int {
  UP_AND_OUT = 0,
  UP_AND_IN = 1,
  DOWN_AND_OUT = 2,
  DOWN_AND_IN = 3,
  BarrierType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BarrierType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BarrierType_IsValid(int value);
constexpr BarrierType BarrierType_MIN = UP_AND_OUT;
constexpr BarrierType BarrierType_MAX = DOWN_AND_IN;
constexpr int BarrierType_ARRAYSIZE = BarrierType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BarrierType_descriptor();
template<typename T>
inline const std::string& BarrierType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BarrierType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BarrierType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BarrierType_descriptor(), enum_t_value);
}
inline bool BarrierType_Parse(
    const std::string& name, BarrierType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BarrierType>(
    BarrierType_descriptor(), name, value);
}
// ===================================================================

class SimulationConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.SimulationConfig) */ {
 public:
  inline SimulationConfig() : SimulationConfig(nullptr) {};
  virtual ~SimulationConfig();

  SimulationConfig(const SimulationConfig& from);
  SimulationConfig(SimulationConfig&& from) noexcept
    : SimulationConfig() {
    *this = ::std::move(from);
  }

  inline SimulationConfig& operator=(const SimulationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationConfig& operator=(SimulationConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulationConfig* internal_default_instance() {
    return reinterpret_cast<const SimulationConfig*>(
               &_SimulationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimulationConfig& a, SimulationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationConfig* New() const final {
    return CreateMaybeMessage<SimulationConfig>(nullptr);
  }

  SimulationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationConfig& from);
  void MergeFrom(const SimulationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.SimulationConfig";
  }
  protected:
  explicit SimulationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumSimulationsFieldNumber = 1,
    kNumStepsFieldNumber = 2,
    kSeedFieldNumber = 3,
    kAntitheticEnabledFieldNumber = 4,
    kControlVariatesEnabledFieldNumber = 5,
    kStratifiedSamplingEnabledFieldNumber = 6,
  };
  // uint64 num_simulations = 1;
  void clear_num_simulations();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_simulations() const;
  void set_num_simulations(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_simulations() const;
  void _internal_set_num_simulations(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_steps = 2;
  void clear_num_steps();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_steps() const;
  void set_num_steps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_steps() const;
  void _internal_set_num_steps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 seed = 3;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::uint64 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool antithetic_enabled = 4;
  void clear_antithetic_enabled();
  bool antithetic_enabled() const;
  void set_antithetic_enabled(bool value);
  private:
  bool _internal_antithetic_enabled() const;
  void _internal_set_antithetic_enabled(bool value);
  public:

  // bool control_variates_enabled = 5;
  void clear_control_variates_enabled();
  bool control_variates_enabled() const;
  void set_control_variates_enabled(bool value);
  private:
  bool _internal_control_variates_enabled() const;
  void _internal_set_control_variates_enabled(bool value);
  public:

  // bool stratified_sampling_enabled = 6;
  void clear_stratified_sampling_enabled();
  bool stratified_sampling_enabled() const;
  void set_stratified_sampling_enabled(bool value);
  private:
  bool _internal_stratified_sampling_enabled() const;
  void _internal_set_stratified_sampling_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mcoptions.SimulationConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_simulations_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_steps_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seed_;
  bool antithetic_enabled_;
  bool control_variates_enabled_;
  bool stratified_sampling_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// -------------------------------------------------------------------

class EuropeanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.EuropeanRequest) */ {
 public:
  inline EuropeanRequest() : EuropeanRequest(nullptr) {};
  virtual ~EuropeanRequest();

  EuropeanRequest(const EuropeanRequest& from);
  EuropeanRequest(EuropeanRequest&& from) noexcept
    : EuropeanRequest() {
    *this = ::std::move(from);
  }

  inline EuropeanRequest& operator=(const EuropeanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EuropeanRequest& operator=(EuropeanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EuropeanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EuropeanRequest* internal_default_instance() {
    return reinterpret_cast<const EuropeanRequest*>(
               &_EuropeanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EuropeanRequest& a, EuropeanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EuropeanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EuropeanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EuropeanRequest* New() const final {
    return CreateMaybeMessage<EuropeanRequest>(nullptr);
  }

  EuropeanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EuropeanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EuropeanRequest& from);
  void MergeFrom(const EuropeanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EuropeanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.EuropeanRequest";
  }
  protected:
  explicit EuropeanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 6,
    kSpotFieldNumber = 1,
    kStrikeFieldNumber = 2,
    kRateFieldNumber = 3,
    kVolatilityFieldNumber = 4,
    kTimeToMaturityFieldNumber = 5,
  };
  // .mcoptions.SimulationConfig config = 6;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::mcoptions::SimulationConfig& config() const;
  ::mcoptions::SimulationConfig* release_config();
  ::mcoptions::SimulationConfig* mutable_config();
  void set_allocated_config(::mcoptions::SimulationConfig* config);
  private:
  const ::mcoptions::SimulationConfig& _internal_config() const;
  ::mcoptions::SimulationConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::mcoptions::SimulationConfig* config);
  ::mcoptions::SimulationConfig* unsafe_arena_release_config();

  // double spot = 1;
  void clear_spot();
  double spot() const;
  void set_spot(double value);
  private:
  double _internal_spot() const;
  void _internal_set_spot(double value);
  public:

  // double strike = 2;
  void clear_strike();
  double strike() const;
  void set_strike(double value);
  private:
  double _internal_strike() const;
  void _internal_set_strike(double value);
  public:

  // double rate = 3;
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // double volatility = 4;
  void clear_volatility();
  double volatility() const;
  void set_volatility(double value);
  private:
  double _internal_volatility() const;
  void _internal_set_volatility(double value);
  public:

  // double time_to_maturity = 5;
  void clear_time_to_maturity();
  double time_to_maturity() const;
  void set_time_to_maturity(double value);
  private:
  double _internal_time_to_maturity() const;
  void _internal_set_time_to_maturity(double value);
  public:

  // @@protoc_insertion_point(class_scope:mcoptions.EuropeanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mcoptions::SimulationConfig* config_;
  double spot_;
  double strike_;
  double rate_;
  double volatility_;
  double time_to_maturity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// -------------------------------------------------------------------

class AmericanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.AmericanRequest) */ {
 public:
  inline AmericanRequest() : AmericanRequest(nullptr) {};
  virtual ~AmericanRequest();

  AmericanRequest(const AmericanRequest& from);
  AmericanRequest(AmericanRequest&& from) noexcept
    : AmericanRequest() {
    *this = ::std::move(from);
  }

  inline AmericanRequest& operator=(const AmericanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmericanRequest& operator=(AmericanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AmericanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AmericanRequest* internal_default_instance() {
    return reinterpret_cast<const AmericanRequest*>(
               &_AmericanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AmericanRequest& a, AmericanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AmericanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmericanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AmericanRequest* New() const final {
    return CreateMaybeMessage<AmericanRequest>(nullptr);
  }

  AmericanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AmericanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AmericanRequest& from);
  void MergeFrom(const AmericanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmericanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.AmericanRequest";
  }
  protected:
  explicit AmericanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 7,
    kSpotFieldNumber = 1,
    kStrikeFieldNumber = 2,
    kRateFieldNumber = 3,
    kVolatilityFieldNumber = 4,
    kTimeToMaturityFieldNumber = 5,
    kNumExercisePointsFieldNumber = 6,
  };
  // .mcoptions.SimulationConfig config = 7;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::mcoptions::SimulationConfig& config() const;
  ::mcoptions::SimulationConfig* release_config();
  ::mcoptions::SimulationConfig* mutable_config();
  void set_allocated_config(::mcoptions::SimulationConfig* config);
  private:
  const ::mcoptions::SimulationConfig& _internal_config() const;
  ::mcoptions::SimulationConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::mcoptions::SimulationConfig* config);
  ::mcoptions::SimulationConfig* unsafe_arena_release_config();

  // double spot = 1;
  void clear_spot();
  double spot() const;
  void set_spot(double value);
  private:
  double _internal_spot() const;
  void _internal_set_spot(double value);
  public:

  // double strike = 2;
  void clear_strike();
  double strike() const;
  void set_strike(double value);
  private:
  double _internal_strike() const;
  void _internal_set_strike(double value);
  public:

  // double rate = 3;
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // double volatility = 4;
  void clear_volatility();
  double volatility() const;
  void set_volatility(double value);
  private:
  double _internal_volatility() const;
  void _internal_set_volatility(double value);
  public:

  // double time_to_maturity = 5;
  void clear_time_to_maturity();
  double time_to_maturity() const;
  void set_time_to_maturity(double value);
  private:
  double _internal_time_to_maturity() const;
  void _internal_set_time_to_maturity(double value);
  public:

  // uint32 num_exercise_points = 6;
  void clear_num_exercise_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_exercise_points() const;
  void set_num_exercise_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_exercise_points() const;
  void _internal_set_num_exercise_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mcoptions.AmericanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mcoptions::SimulationConfig* config_;
  double spot_;
  double strike_;
  double rate_;
  double volatility_;
  double time_to_maturity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_exercise_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// -------------------------------------------------------------------

class AsianRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.AsianRequest) */ {
 public:
  inline AsianRequest() : AsianRequest(nullptr) {};
  virtual ~AsianRequest();

  AsianRequest(const AsianRequest& from);
  AsianRequest(AsianRequest&& from) noexcept
    : AsianRequest() {
    *this = ::std::move(from);
  }

  inline AsianRequest& operator=(const AsianRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsianRequest& operator=(AsianRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsianRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsianRequest* internal_default_instance() {
    return reinterpret_cast<const AsianRequest*>(
               &_AsianRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AsianRequest& a, AsianRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AsianRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsianRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsianRequest* New() const final {
    return CreateMaybeMessage<AsianRequest>(nullptr);
  }

  AsianRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsianRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsianRequest& from);
  void MergeFrom(const AsianRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsianRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.AsianRequest";
  }
  protected:
  explicit AsianRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 7,
    kSpotFieldNumber = 1,
    kStrikeFieldNumber = 2,
    kRateFieldNumber = 3,
    kVolatilityFieldNumber = 4,
    kTimeToMaturityFieldNumber = 5,
    kNumObservationsFieldNumber = 6,
  };
  // .mcoptions.SimulationConfig config = 7;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::mcoptions::SimulationConfig& config() const;
  ::mcoptions::SimulationConfig* release_config();
  ::mcoptions::SimulationConfig* mutable_config();
  void set_allocated_config(::mcoptions::SimulationConfig* config);
  private:
  const ::mcoptions::SimulationConfig& _internal_config() const;
  ::mcoptions::SimulationConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::mcoptions::SimulationConfig* config);
  ::mcoptions::SimulationConfig* unsafe_arena_release_config();

  // double spot = 1;
  void clear_spot();
  double spot() const;
  void set_spot(double value);
  private:
  double _internal_spot() const;
  void _internal_set_spot(double value);
  public:

  // double strike = 2;
  void clear_strike();
  double strike() const;
  void set_strike(double value);
  private:
  double _internal_strike() const;
  void _internal_set_strike(double value);
  public:

  // double rate = 3;
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // double volatility = 4;
  void clear_volatility();
  double volatility() const;
  void set_volatility(double value);
  private:
  double _internal_volatility() const;
  void _internal_set_volatility(double value);
  public:

  // double time_to_maturity = 5;
  void clear_time_to_maturity();
  double time_to_maturity() const;
  void set_time_to_maturity(double value);
  private:
  double _internal_time_to_maturity() const;
  void _internal_set_time_to_maturity(double value);
  public:

  // uint32 num_observations = 6;
  void clear_num_observations();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_observations() const;
  void set_num_observations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_observations() const;
  void _internal_set_num_observations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mcoptions.AsianRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mcoptions::SimulationConfig* config_;
  double spot_;
  double strike_;
  double rate_;
  double volatility_;
  double time_to_maturity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_observations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// -------------------------------------------------------------------

class BarrierRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.BarrierRequest) */ {
 public:
  inline BarrierRequest() : BarrierRequest(nullptr) {};
  virtual ~BarrierRequest();

  BarrierRequest(const BarrierRequest& from);
  BarrierRequest(BarrierRequest&& from) noexcept
    : BarrierRequest() {
    *this = ::std::move(from);
  }

  inline BarrierRequest& operator=(const BarrierRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarrierRequest& operator=(BarrierRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BarrierRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BarrierRequest* internal_default_instance() {
    return reinterpret_cast<const BarrierRequest*>(
               &_BarrierRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BarrierRequest& a, BarrierRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BarrierRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BarrierRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BarrierRequest* New() const final {
    return CreateMaybeMessage<BarrierRequest>(nullptr);
  }

  BarrierRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BarrierRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BarrierRequest& from);
  void MergeFrom(const BarrierRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BarrierRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.BarrierRequest";
  }
  protected:
  explicit BarrierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 9,
    kSpotFieldNumber = 1,
    kStrikeFieldNumber = 2,
    kRateFieldNumber = 3,
    kVolatilityFieldNumber = 4,
    kTimeToMaturityFieldNumber = 5,
    kBarrierLevelFieldNumber = 6,
    kRebateFieldNumber = 8,
    kBarrierTypeFieldNumber = 7,
  };
  // .mcoptions.SimulationConfig config = 9;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::mcoptions::SimulationConfig& config() const;
  ::mcoptions::SimulationConfig* release_config();
  ::mcoptions::SimulationConfig* mutable_config();
  void set_allocated_config(::mcoptions::SimulationConfig* config);
  private:
  const ::mcoptions::SimulationConfig& _internal_config() const;
  ::mcoptions::SimulationConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::mcoptions::SimulationConfig* config);
  ::mcoptions::SimulationConfig* unsafe_arena_release_config();

  // double spot = 1;
  void clear_spot();
  double spot() const;
  void set_spot(double value);
  private:
  double _internal_spot() const;
  void _internal_set_spot(double value);
  public:

  // double strike = 2;
  void clear_strike();
  double strike() const;
  void set_strike(double value);
  private:
  double _internal_strike() const;
  void _internal_set_strike(double value);
  public:

  // double rate = 3;
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // double volatility = 4;
  void clear_volatility();
  double volatility() const;
  void set_volatility(double value);
  private:
  double _internal_volatility() const;
  void _internal_set_volatility(double value);
  public:

  // double time_to_maturity = 5;
  void clear_time_to_maturity();
  double time_to_maturity() const;
  void set_time_to_maturity(double value);
  private:
  double _internal_time_to_maturity() const;
  void _internal_set_time_to_maturity(double value);
  public:

  // double barrier_level = 6;
  void clear_barrier_level();
  double barrier_level() const;
  void set_barrier_level(double value);
  private:
  double _internal_barrier_level() const;
  void _internal_set_barrier_level(double value);
  public:

  // double rebate = 8;
  void clear_rebate();
  double rebate() const;
  void set_rebate(double value);
  private:
  double _internal_rebate() const;
  void _internal_set_rebate(double value);
  public:

  // .mcoptions.BarrierType barrier_type = 7;
  void clear_barrier_type();
  ::mcoptions::BarrierType barrier_type() const;
  void set_barrier_type(::mcoptions::BarrierType value);
  private:
  ::mcoptions::BarrierType _internal_barrier_type() const;
  void _internal_set_barrier_type(::mcoptions::BarrierType value);
  public:

  // @@protoc_insertion_point(class_scope:mcoptions.BarrierRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mcoptions::SimulationConfig* config_;
  double spot_;
  double strike_;
  double rate_;
  double volatility_;
  double time_to_maturity_;
  double barrier_level_;
  double rebate_;
  int barrier_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// -------------------------------------------------------------------

class LookbackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.LookbackRequest) */ {
 public:
  inline LookbackRequest() : LookbackRequest(nullptr) {};
  virtual ~LookbackRequest();

  LookbackRequest(const LookbackRequest& from);
  LookbackRequest(LookbackRequest&& from) noexcept
    : LookbackRequest() {
    *this = ::std::move(from);
  }

  inline LookbackRequest& operator=(const LookbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookbackRequest& operator=(LookbackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LookbackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookbackRequest* internal_default_instance() {
    return reinterpret_cast<const LookbackRequest*>(
               &_LookbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LookbackRequest& a, LookbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LookbackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookbackRequest* New() const final {
    return CreateMaybeMessage<LookbackRequest>(nullptr);
  }

  LookbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookbackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LookbackRequest& from);
  void MergeFrom(const LookbackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookbackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.LookbackRequest";
  }
  protected:
  explicit LookbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 7,
    kSpotFieldNumber = 1,
    kStrikeFieldNumber = 2,
    kRateFieldNumber = 3,
    kVolatilityFieldNumber = 4,
    kTimeToMaturityFieldNumber = 5,
    kFixedStrikeFieldNumber = 6,
  };
  // .mcoptions.SimulationConfig config = 7;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::mcoptions::SimulationConfig& config() const;
  ::mcoptions::SimulationConfig* release_config();
  ::mcoptions::SimulationConfig* mutable_config();
  void set_allocated_config(::mcoptions::SimulationConfig* config);
  private:
  const ::mcoptions::SimulationConfig& _internal_config() const;
  ::mcoptions::SimulationConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::mcoptions::SimulationConfig* config);
  ::mcoptions::SimulationConfig* unsafe_arena_release_config();

  // double spot = 1;
  void clear_spot();
  double spot() const;
  void set_spot(double value);
  private:
  double _internal_spot() const;
  void _internal_set_spot(double value);
  public:

  // double strike = 2;
  void clear_strike();
  double strike() const;
  void set_strike(double value);
  private:
  double _internal_strike() const;
  void _internal_set_strike(double value);
  public:

  // double rate = 3;
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // double volatility = 4;
  void clear_volatility();
  double volatility() const;
  void set_volatility(double value);
  private:
  double _internal_volatility() const;
  void _internal_set_volatility(double value);
  public:

  // double time_to_maturity = 5;
  void clear_time_to_maturity();
  double time_to_maturity() const;
  void set_time_to_maturity(double value);
  private:
  double _internal_time_to_maturity() const;
  void _internal_set_time_to_maturity(double value);
  public:

  // bool fixed_strike = 6;
  void clear_fixed_strike();
  bool fixed_strike() const;
  void set_fixed_strike(bool value);
  private:
  bool _internal_fixed_strike() const;
  void _internal_set_fixed_strike(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mcoptions.LookbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mcoptions::SimulationConfig* config_;
  double spot_;
  double strike_;
  double rate_;
  double volatility_;
  double time_to_maturity_;
  bool fixed_strike_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// -------------------------------------------------------------------

class BermudanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.BermudanRequest) */ {
 public:
  inline BermudanRequest() : BermudanRequest(nullptr) {};
  virtual ~BermudanRequest();

  BermudanRequest(const BermudanRequest& from);
  BermudanRequest(BermudanRequest&& from) noexcept
    : BermudanRequest() {
    *this = ::std::move(from);
  }

  inline BermudanRequest& operator=(const BermudanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BermudanRequest& operator=(BermudanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BermudanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BermudanRequest* internal_default_instance() {
    return reinterpret_cast<const BermudanRequest*>(
               &_BermudanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BermudanRequest& a, BermudanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BermudanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BermudanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BermudanRequest* New() const final {
    return CreateMaybeMessage<BermudanRequest>(nullptr);
  }

  BermudanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BermudanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BermudanRequest& from);
  void MergeFrom(const BermudanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BermudanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.BermudanRequest";
  }
  protected:
  explicit BermudanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExerciseDatesFieldNumber = 5,
    kConfigFieldNumber = 6,
    kSpotFieldNumber = 1,
    kStrikeFieldNumber = 2,
    kRateFieldNumber = 3,
    kVolatilityFieldNumber = 4,
  };
  // repeated double exercise_dates = 5;
  int exercise_dates_size() const;
  private:
  int _internal_exercise_dates_size() const;
  public:
  void clear_exercise_dates();
  private:
  double _internal_exercise_dates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_exercise_dates() const;
  void _internal_add_exercise_dates(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_exercise_dates();
  public:
  double exercise_dates(int index) const;
  void set_exercise_dates(int index, double value);
  void add_exercise_dates(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      exercise_dates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_exercise_dates();

  // .mcoptions.SimulationConfig config = 6;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::mcoptions::SimulationConfig& config() const;
  ::mcoptions::SimulationConfig* release_config();
  ::mcoptions::SimulationConfig* mutable_config();
  void set_allocated_config(::mcoptions::SimulationConfig* config);
  private:
  const ::mcoptions::SimulationConfig& _internal_config() const;
  ::mcoptions::SimulationConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::mcoptions::SimulationConfig* config);
  ::mcoptions::SimulationConfig* unsafe_arena_release_config();

  // double spot = 1;
  void clear_spot();
  double spot() const;
  void set_spot(double value);
  private:
  double _internal_spot() const;
  void _internal_set_spot(double value);
  public:

  // double strike = 2;
  void clear_strike();
  double strike() const;
  void set_strike(double value);
  private:
  double _internal_strike() const;
  void _internal_set_strike(double value);
  public:

  // double rate = 3;
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // double volatility = 4;
  void clear_volatility();
  double volatility() const;
  void set_volatility(double value);
  private:
  double _internal_volatility() const;
  void _internal_set_volatility(double value);
  public:

  // @@protoc_insertion_point(class_scope:mcoptions.BermudanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > exercise_dates_;
  mutable std::atomic<int> _exercise_dates_cached_byte_size_;
  ::mcoptions::SimulationConfig* config_;
  double spot_;
  double strike_;
  double rate_;
  double volatility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// -------------------------------------------------------------------

class PriceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.PriceResponse) */ {
 public:
  inline PriceResponse() : PriceResponse(nullptr) {};
  virtual ~PriceResponse();

  PriceResponse(const PriceResponse& from);
  PriceResponse(PriceResponse&& from) noexcept
    : PriceResponse() {
    *this = ::std::move(from);
  }

  inline PriceResponse& operator=(const PriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceResponse& operator=(PriceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceResponse* internal_default_instance() {
    return reinterpret_cast<const PriceResponse*>(
               &_PriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PriceResponse& a, PriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceResponse* New() const final {
    return CreateMaybeMessage<PriceResponse>(nullptr);
  }

  PriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceResponse& from);
  void MergeFrom(const PriceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.PriceResponse";
  }
  protected:
  explicit PriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kPriceFieldNumber = 1,
    kComputationTimeMsFieldNumber = 2,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error_message(
      std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // double price = 1;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // double computation_time_ms = 2;
  void clear_computation_time_ms();
  double computation_time_ms() const;
  void set_computation_time_ms(double value);
  private:
  double _internal_computation_time_ms() const;
  void _internal_set_computation_time_ms(double value);
  public:

  // @@protoc_insertion_point(class_scope:mcoptions.PriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  double price_;
  double computation_time_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// -------------------------------------------------------------------

class BatchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.BatchRequest) */ {
 public:
  inline BatchRequest() : BatchRequest(nullptr) {};
  virtual ~BatchRequest();

  BatchRequest(const BatchRequest& from);
  BatchRequest(BatchRequest&& from) noexcept
    : BatchRequest() {
    *this = ::std::move(from);
  }

  inline BatchRequest& operator=(const BatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchRequest& operator=(BatchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchRequest* internal_default_instance() {
    return reinterpret_cast<const BatchRequest*>(
               &_BatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BatchRequest& a, BatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchRequest* New() const final {
    return CreateMaybeMessage<BatchRequest>(nullptr);
  }

  BatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchRequest& from);
  void MergeFrom(const BatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.BatchRequest";
  }
  protected:
  explicit BatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEuropeanCallsFieldNumber = 1,
    kEuropeanPutsFieldNumber = 2,
    kConfigFieldNumber = 3,
  };
  // repeated .mcoptions.EuropeanRequest european_calls = 1;
  int european_calls_size() const;
  private:
  int _internal_european_calls_size() const;
  public:
  void clear_european_calls();
  ::mcoptions::EuropeanRequest* mutable_european_calls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest >*
      mutable_european_calls();
  private:
  const ::mcoptions::EuropeanRequest& _internal_european_calls(int index) const;
  ::mcoptions::EuropeanRequest* _internal_add_european_calls();
  public:
  const ::mcoptions::EuropeanRequest& european_calls(int index) const;
  ::mcoptions::EuropeanRequest* add_european_calls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest >&
      european_calls() const;

  // repeated .mcoptions.EuropeanRequest european_puts = 2;
  int european_puts_size() const;
  private:
  int _internal_european_puts_size() const;
  public:
  void clear_european_puts();
  ::mcoptions::EuropeanRequest* mutable_european_puts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest >*
      mutable_european_puts();
  private:
  const ::mcoptions::EuropeanRequest& _internal_european_puts(int index) const;
  ::mcoptions::EuropeanRequest* _internal_add_european_puts();
  public:
  const ::mcoptions::EuropeanRequest& european_puts(int index) const;
  ::mcoptions::EuropeanRequest* add_european_puts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest >&
      european_puts() const;

  // .mcoptions.SimulationConfig config = 3;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::mcoptions::SimulationConfig& config() const;
  ::mcoptions::SimulationConfig* release_config();
  ::mcoptions::SimulationConfig* mutable_config();
  void set_allocated_config(::mcoptions::SimulationConfig* config);
  private:
  const ::mcoptions::SimulationConfig& _internal_config() const;
  ::mcoptions::SimulationConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::mcoptions::SimulationConfig* config);
  ::mcoptions::SimulationConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:mcoptions.BatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest > european_calls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest > european_puts_;
  ::mcoptions::SimulationConfig* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// -------------------------------------------------------------------

class BatchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcoptions.BatchResponse) */ {
 public:
  inline BatchResponse() : BatchResponse(nullptr) {};
  virtual ~BatchResponse();

  BatchResponse(const BatchResponse& from);
  BatchResponse(BatchResponse&& from) noexcept
    : BatchResponse() {
    *this = ::std::move(from);
  }

  inline BatchResponse& operator=(const BatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchResponse& operator=(BatchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchResponse* internal_default_instance() {
    return reinterpret_cast<const BatchResponse*>(
               &_BatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BatchResponse& a, BatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchResponse* New() const final {
    return CreateMaybeMessage<BatchResponse>(nullptr);
  }

  BatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchResponse& from);
  void MergeFrom(const BatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcoptions.BatchResponse";
  }
  protected:
  explicit BatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mcoptions_2eproto);
    return ::descriptor_table_mcoptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEuropeanCallPricesFieldNumber = 1,
    kEuropeanPutPricesFieldNumber = 2,
    kTotalComputationTimeMsFieldNumber = 3,
  };
  // repeated double european_call_prices = 1;
  int european_call_prices_size() const;
  private:
  int _internal_european_call_prices_size() const;
  public:
  void clear_european_call_prices();
  private:
  double _internal_european_call_prices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_european_call_prices() const;
  void _internal_add_european_call_prices(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_european_call_prices();
  public:
  double european_call_prices(int index) const;
  void set_european_call_prices(int index, double value);
  void add_european_call_prices(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      european_call_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_european_call_prices();

  // repeated double european_put_prices = 2;
  int european_put_prices_size() const;
  private:
  int _internal_european_put_prices_size() const;
  public:
  void clear_european_put_prices();
  private:
  double _internal_european_put_prices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_european_put_prices() const;
  void _internal_add_european_put_prices(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_european_put_prices();
  public:
  double european_put_prices(int index) const;
  void set_european_put_prices(int index, double value);
  void add_european_put_prices(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      european_put_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_european_put_prices();

  // double total_computation_time_ms = 3;
  void clear_total_computation_time_ms();
  double total_computation_time_ms() const;
  void set_total_computation_time_ms(double value);
  private:
  double _internal_total_computation_time_ms() const;
  void _internal_set_total_computation_time_ms(double value);
  public:

  // @@protoc_insertion_point(class_scope:mcoptions.BatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > european_call_prices_;
  mutable std::atomic<int> _european_call_prices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > european_put_prices_;
  mutable std::atomic<int> _european_put_prices_cached_byte_size_;
  double total_computation_time_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mcoptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimulationConfig

// uint64 num_simulations = 1;
inline void SimulationConfig::clear_num_simulations() {
  num_simulations_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimulationConfig::_internal_num_simulations() const {
  return num_simulations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimulationConfig::num_simulations() const {
  // @@protoc_insertion_point(field_get:mcoptions.SimulationConfig.num_simulations)
  return _internal_num_simulations();
}
inline void SimulationConfig::_internal_set_num_simulations(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_simulations_ = value;
}
inline void SimulationConfig::set_num_simulations(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_simulations(value);
  // @@protoc_insertion_point(field_set:mcoptions.SimulationConfig.num_simulations)
}

// uint64 num_steps = 2;
inline void SimulationConfig::clear_num_steps() {
  num_steps_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimulationConfig::_internal_num_steps() const {
  return num_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimulationConfig::num_steps() const {
  // @@protoc_insertion_point(field_get:mcoptions.SimulationConfig.num_steps)
  return _internal_num_steps();
}
inline void SimulationConfig::_internal_set_num_steps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_steps_ = value;
}
inline void SimulationConfig::set_num_steps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_steps(value);
  // @@protoc_insertion_point(field_set:mcoptions.SimulationConfig.num_steps)
}

// uint64 seed = 3;
inline void SimulationConfig::clear_seed() {
  seed_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimulationConfig::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimulationConfig::seed() const {
  // @@protoc_insertion_point(field_get:mcoptions.SimulationConfig.seed)
  return _internal_seed();
}
inline void SimulationConfig::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seed_ = value;
}
inline void SimulationConfig::set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:mcoptions.SimulationConfig.seed)
}

// bool antithetic_enabled = 4;
inline void SimulationConfig::clear_antithetic_enabled() {
  antithetic_enabled_ = false;
}
inline bool SimulationConfig::_internal_antithetic_enabled() const {
  return antithetic_enabled_;
}
inline bool SimulationConfig::antithetic_enabled() const {
  // @@protoc_insertion_point(field_get:mcoptions.SimulationConfig.antithetic_enabled)
  return _internal_antithetic_enabled();
}
inline void SimulationConfig::_internal_set_antithetic_enabled(bool value) {
  
  antithetic_enabled_ = value;
}
inline void SimulationConfig::set_antithetic_enabled(bool value) {
  _internal_set_antithetic_enabled(value);
  // @@protoc_insertion_point(field_set:mcoptions.SimulationConfig.antithetic_enabled)
}

// bool control_variates_enabled = 5;
inline void SimulationConfig::clear_control_variates_enabled() {
  control_variates_enabled_ = false;
}
inline bool SimulationConfig::_internal_control_variates_enabled() const {
  return control_variates_enabled_;
}
inline bool SimulationConfig::control_variates_enabled() const {
  // @@protoc_insertion_point(field_get:mcoptions.SimulationConfig.control_variates_enabled)
  return _internal_control_variates_enabled();
}
inline void SimulationConfig::_internal_set_control_variates_enabled(bool value) {
  
  control_variates_enabled_ = value;
}
inline void SimulationConfig::set_control_variates_enabled(bool value) {
  _internal_set_control_variates_enabled(value);
  // @@protoc_insertion_point(field_set:mcoptions.SimulationConfig.control_variates_enabled)
}

// bool stratified_sampling_enabled = 6;
inline void SimulationConfig::clear_stratified_sampling_enabled() {
  stratified_sampling_enabled_ = false;
}
inline bool SimulationConfig::_internal_stratified_sampling_enabled() const {
  return stratified_sampling_enabled_;
}
inline bool SimulationConfig::stratified_sampling_enabled() const {
  // @@protoc_insertion_point(field_get:mcoptions.SimulationConfig.stratified_sampling_enabled)
  return _internal_stratified_sampling_enabled();
}
inline void SimulationConfig::_internal_set_stratified_sampling_enabled(bool value) {
  
  stratified_sampling_enabled_ = value;
}
inline void SimulationConfig::set_stratified_sampling_enabled(bool value) {
  _internal_set_stratified_sampling_enabled(value);
  // @@protoc_insertion_point(field_set:mcoptions.SimulationConfig.stratified_sampling_enabled)
}

// -------------------------------------------------------------------

// EuropeanRequest

// double spot = 1;
inline void EuropeanRequest::clear_spot() {
  spot_ = 0;
}
inline double EuropeanRequest::_internal_spot() const {
  return spot_;
}
inline double EuropeanRequest::spot() const {
  // @@protoc_insertion_point(field_get:mcoptions.EuropeanRequest.spot)
  return _internal_spot();
}
inline void EuropeanRequest::_internal_set_spot(double value) {
  
  spot_ = value;
}
inline void EuropeanRequest::set_spot(double value) {
  _internal_set_spot(value);
  // @@protoc_insertion_point(field_set:mcoptions.EuropeanRequest.spot)
}

// double strike = 2;
inline void EuropeanRequest::clear_strike() {
  strike_ = 0;
}
inline double EuropeanRequest::_internal_strike() const {
  return strike_;
}
inline double EuropeanRequest::strike() const {
  // @@protoc_insertion_point(field_get:mcoptions.EuropeanRequest.strike)
  return _internal_strike();
}
inline void EuropeanRequest::_internal_set_strike(double value) {
  
  strike_ = value;
}
inline void EuropeanRequest::set_strike(double value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:mcoptions.EuropeanRequest.strike)
}

// double rate = 3;
inline void EuropeanRequest::clear_rate() {
  rate_ = 0;
}
inline double EuropeanRequest::_internal_rate() const {
  return rate_;
}
inline double EuropeanRequest::rate() const {
  // @@protoc_insertion_point(field_get:mcoptions.EuropeanRequest.rate)
  return _internal_rate();
}
inline void EuropeanRequest::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void EuropeanRequest::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mcoptions.EuropeanRequest.rate)
}

// double volatility = 4;
inline void EuropeanRequest::clear_volatility() {
  volatility_ = 0;
}
inline double EuropeanRequest::_internal_volatility() const {
  return volatility_;
}
inline double EuropeanRequest::volatility() const {
  // @@protoc_insertion_point(field_get:mcoptions.EuropeanRequest.volatility)
  return _internal_volatility();
}
inline void EuropeanRequest::_internal_set_volatility(double value) {
  
  volatility_ = value;
}
inline void EuropeanRequest::set_volatility(double value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:mcoptions.EuropeanRequest.volatility)
}

// double time_to_maturity = 5;
inline void EuropeanRequest::clear_time_to_maturity() {
  time_to_maturity_ = 0;
}
inline double EuropeanRequest::_internal_time_to_maturity() const {
  return time_to_maturity_;
}
inline double EuropeanRequest::time_to_maturity() const {
  // @@protoc_insertion_point(field_get:mcoptions.EuropeanRequest.time_to_maturity)
  return _internal_time_to_maturity();
}
inline void EuropeanRequest::_internal_set_time_to_maturity(double value) {
  
  time_to_maturity_ = value;
}
inline void EuropeanRequest::set_time_to_maturity(double value) {
  _internal_set_time_to_maturity(value);
  // @@protoc_insertion_point(field_set:mcoptions.EuropeanRequest.time_to_maturity)
}

// .mcoptions.SimulationConfig config = 6;
inline bool EuropeanRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool EuropeanRequest::has_config() const {
  return _internal_has_config();
}
inline void EuropeanRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::mcoptions::SimulationConfig& EuropeanRequest::_internal_config() const {
  const ::mcoptions::SimulationConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mcoptions::SimulationConfig*>(
      &::mcoptions::_SimulationConfig_default_instance_);
}
inline const ::mcoptions::SimulationConfig& EuropeanRequest::config() const {
  // @@protoc_insertion_point(field_get:mcoptions.EuropeanRequest.config)
  return _internal_config();
}
inline void EuropeanRequest::unsafe_arena_set_allocated_config(
    ::mcoptions::SimulationConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcoptions.EuropeanRequest.config)
}
inline ::mcoptions::SimulationConfig* EuropeanRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mcoptions::SimulationConfig* EuropeanRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:mcoptions.EuropeanRequest.config)
  
  ::mcoptions::SimulationConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::mcoptions::SimulationConfig* EuropeanRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mcoptions::SimulationConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::mcoptions::SimulationConfig* EuropeanRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:mcoptions.EuropeanRequest.config)
  return _internal_mutable_config();
}
inline void EuropeanRequest::set_allocated_config(::mcoptions::SimulationConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:mcoptions.EuropeanRequest.config)
}

// -------------------------------------------------------------------

// AmericanRequest

// double spot = 1;
inline void AmericanRequest::clear_spot() {
  spot_ = 0;
}
inline double AmericanRequest::_internal_spot() const {
  return spot_;
}
inline double AmericanRequest::spot() const {
  // @@protoc_insertion_point(field_get:mcoptions.AmericanRequest.spot)
  return _internal_spot();
}
inline void AmericanRequest::_internal_set_spot(double value) {
  
  spot_ = value;
}
inline void AmericanRequest::set_spot(double value) {
  _internal_set_spot(value);
  // @@protoc_insertion_point(field_set:mcoptions.AmericanRequest.spot)
}

// double strike = 2;
inline void AmericanRequest::clear_strike() {
  strike_ = 0;
}
inline double AmericanRequest::_internal_strike() const {
  return strike_;
}
inline double AmericanRequest::strike() const {
  // @@protoc_insertion_point(field_get:mcoptions.AmericanRequest.strike)
  return _internal_strike();
}
inline void AmericanRequest::_internal_set_strike(double value) {
  
  strike_ = value;
}
inline void AmericanRequest::set_strike(double value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:mcoptions.AmericanRequest.strike)
}

// double rate = 3;
inline void AmericanRequest::clear_rate() {
  rate_ = 0;
}
inline double AmericanRequest::_internal_rate() const {
  return rate_;
}
inline double AmericanRequest::rate() const {
  // @@protoc_insertion_point(field_get:mcoptions.AmericanRequest.rate)
  return _internal_rate();
}
inline void AmericanRequest::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void AmericanRequest::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mcoptions.AmericanRequest.rate)
}

// double volatility = 4;
inline void AmericanRequest::clear_volatility() {
  volatility_ = 0;
}
inline double AmericanRequest::_internal_volatility() const {
  return volatility_;
}
inline double AmericanRequest::volatility() const {
  // @@protoc_insertion_point(field_get:mcoptions.AmericanRequest.volatility)
  return _internal_volatility();
}
inline void AmericanRequest::_internal_set_volatility(double value) {
  
  volatility_ = value;
}
inline void AmericanRequest::set_volatility(double value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:mcoptions.AmericanRequest.volatility)
}

// double time_to_maturity = 5;
inline void AmericanRequest::clear_time_to_maturity() {
  time_to_maturity_ = 0;
}
inline double AmericanRequest::_internal_time_to_maturity() const {
  return time_to_maturity_;
}
inline double AmericanRequest::time_to_maturity() const {
  // @@protoc_insertion_point(field_get:mcoptions.AmericanRequest.time_to_maturity)
  return _internal_time_to_maturity();
}
inline void AmericanRequest::_internal_set_time_to_maturity(double value) {
  
  time_to_maturity_ = value;
}
inline void AmericanRequest::set_time_to_maturity(double value) {
  _internal_set_time_to_maturity(value);
  // @@protoc_insertion_point(field_set:mcoptions.AmericanRequest.time_to_maturity)
}

// uint32 num_exercise_points = 6;
inline void AmericanRequest::clear_num_exercise_points() {
  num_exercise_points_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AmericanRequest::_internal_num_exercise_points() const {
  return num_exercise_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AmericanRequest::num_exercise_points() const {
  // @@protoc_insertion_point(field_get:mcoptions.AmericanRequest.num_exercise_points)
  return _internal_num_exercise_points();
}
inline void AmericanRequest::_internal_set_num_exercise_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_exercise_points_ = value;
}
inline void AmericanRequest::set_num_exercise_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_exercise_points(value);
  // @@protoc_insertion_point(field_set:mcoptions.AmericanRequest.num_exercise_points)
}

// .mcoptions.SimulationConfig config = 7;
inline bool AmericanRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool AmericanRequest::has_config() const {
  return _internal_has_config();
}
inline void AmericanRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::mcoptions::SimulationConfig& AmericanRequest::_internal_config() const {
  const ::mcoptions::SimulationConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mcoptions::SimulationConfig*>(
      &::mcoptions::_SimulationConfig_default_instance_);
}
inline const ::mcoptions::SimulationConfig& AmericanRequest::config() const {
  // @@protoc_insertion_point(field_get:mcoptions.AmericanRequest.config)
  return _internal_config();
}
inline void AmericanRequest::unsafe_arena_set_allocated_config(
    ::mcoptions::SimulationConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcoptions.AmericanRequest.config)
}
inline ::mcoptions::SimulationConfig* AmericanRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mcoptions::SimulationConfig* AmericanRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:mcoptions.AmericanRequest.config)
  
  ::mcoptions::SimulationConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::mcoptions::SimulationConfig* AmericanRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mcoptions::SimulationConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::mcoptions::SimulationConfig* AmericanRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:mcoptions.AmericanRequest.config)
  return _internal_mutable_config();
}
inline void AmericanRequest::set_allocated_config(::mcoptions::SimulationConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:mcoptions.AmericanRequest.config)
}

// -------------------------------------------------------------------

// AsianRequest

// double spot = 1;
inline void AsianRequest::clear_spot() {
  spot_ = 0;
}
inline double AsianRequest::_internal_spot() const {
  return spot_;
}
inline double AsianRequest::spot() const {
  // @@protoc_insertion_point(field_get:mcoptions.AsianRequest.spot)
  return _internal_spot();
}
inline void AsianRequest::_internal_set_spot(double value) {
  
  spot_ = value;
}
inline void AsianRequest::set_spot(double value) {
  _internal_set_spot(value);
  // @@protoc_insertion_point(field_set:mcoptions.AsianRequest.spot)
}

// double strike = 2;
inline void AsianRequest::clear_strike() {
  strike_ = 0;
}
inline double AsianRequest::_internal_strike() const {
  return strike_;
}
inline double AsianRequest::strike() const {
  // @@protoc_insertion_point(field_get:mcoptions.AsianRequest.strike)
  return _internal_strike();
}
inline void AsianRequest::_internal_set_strike(double value) {
  
  strike_ = value;
}
inline void AsianRequest::set_strike(double value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:mcoptions.AsianRequest.strike)
}

// double rate = 3;
inline void AsianRequest::clear_rate() {
  rate_ = 0;
}
inline double AsianRequest::_internal_rate() const {
  return rate_;
}
inline double AsianRequest::rate() const {
  // @@protoc_insertion_point(field_get:mcoptions.AsianRequest.rate)
  return _internal_rate();
}
inline void AsianRequest::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void AsianRequest::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mcoptions.AsianRequest.rate)
}

// double volatility = 4;
inline void AsianRequest::clear_volatility() {
  volatility_ = 0;
}
inline double AsianRequest::_internal_volatility() const {
  return volatility_;
}
inline double AsianRequest::volatility() const {
  // @@protoc_insertion_point(field_get:mcoptions.AsianRequest.volatility)
  return _internal_volatility();
}
inline void AsianRequest::_internal_set_volatility(double value) {
  
  volatility_ = value;
}
inline void AsianRequest::set_volatility(double value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:mcoptions.AsianRequest.volatility)
}

// double time_to_maturity = 5;
inline void AsianRequest::clear_time_to_maturity() {
  time_to_maturity_ = 0;
}
inline double AsianRequest::_internal_time_to_maturity() const {
  return time_to_maturity_;
}
inline double AsianRequest::time_to_maturity() const {
  // @@protoc_insertion_point(field_get:mcoptions.AsianRequest.time_to_maturity)
  return _internal_time_to_maturity();
}
inline void AsianRequest::_internal_set_time_to_maturity(double value) {
  
  time_to_maturity_ = value;
}
inline void AsianRequest::set_time_to_maturity(double value) {
  _internal_set_time_to_maturity(value);
  // @@protoc_insertion_point(field_set:mcoptions.AsianRequest.time_to_maturity)
}

// uint32 num_observations = 6;
inline void AsianRequest::clear_num_observations() {
  num_observations_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsianRequest::_internal_num_observations() const {
  return num_observations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsianRequest::num_observations() const {
  // @@protoc_insertion_point(field_get:mcoptions.AsianRequest.num_observations)
  return _internal_num_observations();
}
inline void AsianRequest::_internal_set_num_observations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_observations_ = value;
}
inline void AsianRequest::set_num_observations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_observations(value);
  // @@protoc_insertion_point(field_set:mcoptions.AsianRequest.num_observations)
}

// .mcoptions.SimulationConfig config = 7;
inline bool AsianRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool AsianRequest::has_config() const {
  return _internal_has_config();
}
inline void AsianRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::mcoptions::SimulationConfig& AsianRequest::_internal_config() const {
  const ::mcoptions::SimulationConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mcoptions::SimulationConfig*>(
      &::mcoptions::_SimulationConfig_default_instance_);
}
inline const ::mcoptions::SimulationConfig& AsianRequest::config() const {
  // @@protoc_insertion_point(field_get:mcoptions.AsianRequest.config)
  return _internal_config();
}
inline void AsianRequest::unsafe_arena_set_allocated_config(
    ::mcoptions::SimulationConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcoptions.AsianRequest.config)
}
inline ::mcoptions::SimulationConfig* AsianRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mcoptions::SimulationConfig* AsianRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:mcoptions.AsianRequest.config)
  
  ::mcoptions::SimulationConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::mcoptions::SimulationConfig* AsianRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mcoptions::SimulationConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::mcoptions::SimulationConfig* AsianRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:mcoptions.AsianRequest.config)
  return _internal_mutable_config();
}
inline void AsianRequest::set_allocated_config(::mcoptions::SimulationConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:mcoptions.AsianRequest.config)
}

// -------------------------------------------------------------------

// BarrierRequest

// double spot = 1;
inline void BarrierRequest::clear_spot() {
  spot_ = 0;
}
inline double BarrierRequest::_internal_spot() const {
  return spot_;
}
inline double BarrierRequest::spot() const {
  // @@protoc_insertion_point(field_get:mcoptions.BarrierRequest.spot)
  return _internal_spot();
}
inline void BarrierRequest::_internal_set_spot(double value) {
  
  spot_ = value;
}
inline void BarrierRequest::set_spot(double value) {
  _internal_set_spot(value);
  // @@protoc_insertion_point(field_set:mcoptions.BarrierRequest.spot)
}

// double strike = 2;
inline void BarrierRequest::clear_strike() {
  strike_ = 0;
}
inline double BarrierRequest::_internal_strike() const {
  return strike_;
}
inline double BarrierRequest::strike() const {
  // @@protoc_insertion_point(field_get:mcoptions.BarrierRequest.strike)
  return _internal_strike();
}
inline void BarrierRequest::_internal_set_strike(double value) {
  
  strike_ = value;
}
inline void BarrierRequest::set_strike(double value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:mcoptions.BarrierRequest.strike)
}

// double rate = 3;
inline void BarrierRequest::clear_rate() {
  rate_ = 0;
}
inline double BarrierRequest::_internal_rate() const {
  return rate_;
}
inline double BarrierRequest::rate() const {
  // @@protoc_insertion_point(field_get:mcoptions.BarrierRequest.rate)
  return _internal_rate();
}
inline void BarrierRequest::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void BarrierRequest::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mcoptions.BarrierRequest.rate)
}

// double volatility = 4;
inline void BarrierRequest::clear_volatility() {
  volatility_ = 0;
}
inline double BarrierRequest::_internal_volatility() const {
  return volatility_;
}
inline double BarrierRequest::volatility() const {
  // @@protoc_insertion_point(field_get:mcoptions.BarrierRequest.volatility)
  return _internal_volatility();
}
inline void BarrierRequest::_internal_set_volatility(double value) {
  
  volatility_ = value;
}
inline void BarrierRequest::set_volatility(double value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:mcoptions.BarrierRequest.volatility)
}

// double time_to_maturity = 5;
inline void BarrierRequest::clear_time_to_maturity() {
  time_to_maturity_ = 0;
}
inline double BarrierRequest::_internal_time_to_maturity() const {
  return time_to_maturity_;
}
inline double BarrierRequest::time_to_maturity() const {
  // @@protoc_insertion_point(field_get:mcoptions.BarrierRequest.time_to_maturity)
  return _internal_time_to_maturity();
}
inline void BarrierRequest::_internal_set_time_to_maturity(double value) {
  
  time_to_maturity_ = value;
}
inline void BarrierRequest::set_time_to_maturity(double value) {
  _internal_set_time_to_maturity(value);
  // @@protoc_insertion_point(field_set:mcoptions.BarrierRequest.time_to_maturity)
}

// double barrier_level = 6;
inline void BarrierRequest::clear_barrier_level() {
  barrier_level_ = 0;
}
inline double BarrierRequest::_internal_barrier_level() const {
  return barrier_level_;
}
inline double BarrierRequest::barrier_level() const {
  // @@protoc_insertion_point(field_get:mcoptions.BarrierRequest.barrier_level)
  return _internal_barrier_level();
}
inline void BarrierRequest::_internal_set_barrier_level(double value) {
  
  barrier_level_ = value;
}
inline void BarrierRequest::set_barrier_level(double value) {
  _internal_set_barrier_level(value);
  // @@protoc_insertion_point(field_set:mcoptions.BarrierRequest.barrier_level)
}

// .mcoptions.BarrierType barrier_type = 7;
inline void BarrierRequest::clear_barrier_type() {
  barrier_type_ = 0;
}
inline ::mcoptions::BarrierType BarrierRequest::_internal_barrier_type() const {
  return static_cast< ::mcoptions::BarrierType >(barrier_type_);
}
inline ::mcoptions::BarrierType BarrierRequest::barrier_type() const {
  // @@protoc_insertion_point(field_get:mcoptions.BarrierRequest.barrier_type)
  return _internal_barrier_type();
}
inline void BarrierRequest::_internal_set_barrier_type(::mcoptions::BarrierType value) {
  
  barrier_type_ = value;
}
inline void BarrierRequest::set_barrier_type(::mcoptions::BarrierType value) {
  _internal_set_barrier_type(value);
  // @@protoc_insertion_point(field_set:mcoptions.BarrierRequest.barrier_type)
}

// double rebate = 8;
inline void BarrierRequest::clear_rebate() {
  rebate_ = 0;
}
inline double BarrierRequest::_internal_rebate() const {
  return rebate_;
}
inline double BarrierRequest::rebate() const {
  // @@protoc_insertion_point(field_get:mcoptions.BarrierRequest.rebate)
  return _internal_rebate();
}
inline void BarrierRequest::_internal_set_rebate(double value) {
  
  rebate_ = value;
}
inline void BarrierRequest::set_rebate(double value) {
  _internal_set_rebate(value);
  // @@protoc_insertion_point(field_set:mcoptions.BarrierRequest.rebate)
}

// .mcoptions.SimulationConfig config = 9;
inline bool BarrierRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool BarrierRequest::has_config() const {
  return _internal_has_config();
}
inline void BarrierRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::mcoptions::SimulationConfig& BarrierRequest::_internal_config() const {
  const ::mcoptions::SimulationConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mcoptions::SimulationConfig*>(
      &::mcoptions::_SimulationConfig_default_instance_);
}
inline const ::mcoptions::SimulationConfig& BarrierRequest::config() const {
  // @@protoc_insertion_point(field_get:mcoptions.BarrierRequest.config)
  return _internal_config();
}
inline void BarrierRequest::unsafe_arena_set_allocated_config(
    ::mcoptions::SimulationConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcoptions.BarrierRequest.config)
}
inline ::mcoptions::SimulationConfig* BarrierRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mcoptions::SimulationConfig* BarrierRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:mcoptions.BarrierRequest.config)
  
  ::mcoptions::SimulationConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::mcoptions::SimulationConfig* BarrierRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mcoptions::SimulationConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::mcoptions::SimulationConfig* BarrierRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:mcoptions.BarrierRequest.config)
  return _internal_mutable_config();
}
inline void BarrierRequest::set_allocated_config(::mcoptions::SimulationConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:mcoptions.BarrierRequest.config)
}

// -------------------------------------------------------------------

// LookbackRequest

// double spot = 1;
inline void LookbackRequest::clear_spot() {
  spot_ = 0;
}
inline double LookbackRequest::_internal_spot() const {
  return spot_;
}
inline double LookbackRequest::spot() const {
  // @@protoc_insertion_point(field_get:mcoptions.LookbackRequest.spot)
  return _internal_spot();
}
inline void LookbackRequest::_internal_set_spot(double value) {
  
  spot_ = value;
}
inline void LookbackRequest::set_spot(double value) {
  _internal_set_spot(value);
  // @@protoc_insertion_point(field_set:mcoptions.LookbackRequest.spot)
}

// double strike = 2;
inline void LookbackRequest::clear_strike() {
  strike_ = 0;
}
inline double LookbackRequest::_internal_strike() const {
  return strike_;
}
inline double LookbackRequest::strike() const {
  // @@protoc_insertion_point(field_get:mcoptions.LookbackRequest.strike)
  return _internal_strike();
}
inline void LookbackRequest::_internal_set_strike(double value) {
  
  strike_ = value;
}
inline void LookbackRequest::set_strike(double value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:mcoptions.LookbackRequest.strike)
}

// double rate = 3;
inline void LookbackRequest::clear_rate() {
  rate_ = 0;
}
inline double LookbackRequest::_internal_rate() const {
  return rate_;
}
inline double LookbackRequest::rate() const {
  // @@protoc_insertion_point(field_get:mcoptions.LookbackRequest.rate)
  return _internal_rate();
}
inline void LookbackRequest::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void LookbackRequest::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mcoptions.LookbackRequest.rate)
}

// double volatility = 4;
inline void LookbackRequest::clear_volatility() {
  volatility_ = 0;
}
inline double LookbackRequest::_internal_volatility() const {
  return volatility_;
}
inline double LookbackRequest::volatility() const {
  // @@protoc_insertion_point(field_get:mcoptions.LookbackRequest.volatility)
  return _internal_volatility();
}
inline void LookbackRequest::_internal_set_volatility(double value) {
  
  volatility_ = value;
}
inline void LookbackRequest::set_volatility(double value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:mcoptions.LookbackRequest.volatility)
}

// double time_to_maturity = 5;
inline void LookbackRequest::clear_time_to_maturity() {
  time_to_maturity_ = 0;
}
inline double LookbackRequest::_internal_time_to_maturity() const {
  return time_to_maturity_;
}
inline double LookbackRequest::time_to_maturity() const {
  // @@protoc_insertion_point(field_get:mcoptions.LookbackRequest.time_to_maturity)
  return _internal_time_to_maturity();
}
inline void LookbackRequest::_internal_set_time_to_maturity(double value) {
  
  time_to_maturity_ = value;
}
inline void LookbackRequest::set_time_to_maturity(double value) {
  _internal_set_time_to_maturity(value);
  // @@protoc_insertion_point(field_set:mcoptions.LookbackRequest.time_to_maturity)
}

// bool fixed_strike = 6;
inline void LookbackRequest::clear_fixed_strike() {
  fixed_strike_ = false;
}
inline bool LookbackRequest::_internal_fixed_strike() const {
  return fixed_strike_;
}
inline bool LookbackRequest::fixed_strike() const {
  // @@protoc_insertion_point(field_get:mcoptions.LookbackRequest.fixed_strike)
  return _internal_fixed_strike();
}
inline void LookbackRequest::_internal_set_fixed_strike(bool value) {
  
  fixed_strike_ = value;
}
inline void LookbackRequest::set_fixed_strike(bool value) {
  _internal_set_fixed_strike(value);
  // @@protoc_insertion_point(field_set:mcoptions.LookbackRequest.fixed_strike)
}

// .mcoptions.SimulationConfig config = 7;
inline bool LookbackRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool LookbackRequest::has_config() const {
  return _internal_has_config();
}
inline void LookbackRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::mcoptions::SimulationConfig& LookbackRequest::_internal_config() const {
  const ::mcoptions::SimulationConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mcoptions::SimulationConfig*>(
      &::mcoptions::_SimulationConfig_default_instance_);
}
inline const ::mcoptions::SimulationConfig& LookbackRequest::config() const {
  // @@protoc_insertion_point(field_get:mcoptions.LookbackRequest.config)
  return _internal_config();
}
inline void LookbackRequest::unsafe_arena_set_allocated_config(
    ::mcoptions::SimulationConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcoptions.LookbackRequest.config)
}
inline ::mcoptions::SimulationConfig* LookbackRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mcoptions::SimulationConfig* LookbackRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:mcoptions.LookbackRequest.config)
  
  ::mcoptions::SimulationConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::mcoptions::SimulationConfig* LookbackRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mcoptions::SimulationConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::mcoptions::SimulationConfig* LookbackRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:mcoptions.LookbackRequest.config)
  return _internal_mutable_config();
}
inline void LookbackRequest::set_allocated_config(::mcoptions::SimulationConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:mcoptions.LookbackRequest.config)
}

// -------------------------------------------------------------------

// BermudanRequest

// double spot = 1;
inline void BermudanRequest::clear_spot() {
  spot_ = 0;
}
inline double BermudanRequest::_internal_spot() const {
  return spot_;
}
inline double BermudanRequest::spot() const {
  // @@protoc_insertion_point(field_get:mcoptions.BermudanRequest.spot)
  return _internal_spot();
}
inline void BermudanRequest::_internal_set_spot(double value) {
  
  spot_ = value;
}
inline void BermudanRequest::set_spot(double value) {
  _internal_set_spot(value);
  // @@protoc_insertion_point(field_set:mcoptions.BermudanRequest.spot)
}

// double strike = 2;
inline void BermudanRequest::clear_strike() {
  strike_ = 0;
}
inline double BermudanRequest::_internal_strike() const {
  return strike_;
}
inline double BermudanRequest::strike() const {
  // @@protoc_insertion_point(field_get:mcoptions.BermudanRequest.strike)
  return _internal_strike();
}
inline void BermudanRequest::_internal_set_strike(double value) {
  
  strike_ = value;
}
inline void BermudanRequest::set_strike(double value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:mcoptions.BermudanRequest.strike)
}

// double rate = 3;
inline void BermudanRequest::clear_rate() {
  rate_ = 0;
}
inline double BermudanRequest::_internal_rate() const {
  return rate_;
}
inline double BermudanRequest::rate() const {
  // @@protoc_insertion_point(field_get:mcoptions.BermudanRequest.rate)
  return _internal_rate();
}
inline void BermudanRequest::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void BermudanRequest::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mcoptions.BermudanRequest.rate)
}

// double volatility = 4;
inline void BermudanRequest::clear_volatility() {
  volatility_ = 0;
}
inline double BermudanRequest::_internal_volatility() const {
  return volatility_;
}
inline double BermudanRequest::volatility() const {
  // @@protoc_insertion_point(field_get:mcoptions.BermudanRequest.volatility)
  return _internal_volatility();
}
inline void BermudanRequest::_internal_set_volatility(double value) {
  
  volatility_ = value;
}
inline void BermudanRequest::set_volatility(double value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:mcoptions.BermudanRequest.volatility)
}

// repeated double exercise_dates = 5;
inline int BermudanRequest::_internal_exercise_dates_size() const {
  return exercise_dates_.size();
}
inline int BermudanRequest::exercise_dates_size() const {
  return _internal_exercise_dates_size();
}
inline void BermudanRequest::clear_exercise_dates() {
  exercise_dates_.Clear();
}
inline double BermudanRequest::_internal_exercise_dates(int index) const {
  return exercise_dates_.Get(index);
}
inline double BermudanRequest::exercise_dates(int index) const {
  // @@protoc_insertion_point(field_get:mcoptions.BermudanRequest.exercise_dates)
  return _internal_exercise_dates(index);
}
inline void BermudanRequest::set_exercise_dates(int index, double value) {
  exercise_dates_.Set(index, value);
  // @@protoc_insertion_point(field_set:mcoptions.BermudanRequest.exercise_dates)
}
inline void BermudanRequest::_internal_add_exercise_dates(double value) {
  exercise_dates_.Add(value);
}
inline void BermudanRequest::add_exercise_dates(double value) {
  _internal_add_exercise_dates(value);
  // @@protoc_insertion_point(field_add:mcoptions.BermudanRequest.exercise_dates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BermudanRequest::_internal_exercise_dates() const {
  return exercise_dates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BermudanRequest::exercise_dates() const {
  // @@protoc_insertion_point(field_list:mcoptions.BermudanRequest.exercise_dates)
  return _internal_exercise_dates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BermudanRequest::_internal_mutable_exercise_dates() {
  return &exercise_dates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BermudanRequest::mutable_exercise_dates() {
  // @@protoc_insertion_point(field_mutable_list:mcoptions.BermudanRequest.exercise_dates)
  return _internal_mutable_exercise_dates();
}

// .mcoptions.SimulationConfig config = 6;
inline bool BermudanRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool BermudanRequest::has_config() const {
  return _internal_has_config();
}
inline void BermudanRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::mcoptions::SimulationConfig& BermudanRequest::_internal_config() const {
  const ::mcoptions::SimulationConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mcoptions::SimulationConfig*>(
      &::mcoptions::_SimulationConfig_default_instance_);
}
inline const ::mcoptions::SimulationConfig& BermudanRequest::config() const {
  // @@protoc_insertion_point(field_get:mcoptions.BermudanRequest.config)
  return _internal_config();
}
inline void BermudanRequest::unsafe_arena_set_allocated_config(
    ::mcoptions::SimulationConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcoptions.BermudanRequest.config)
}
inline ::mcoptions::SimulationConfig* BermudanRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mcoptions::SimulationConfig* BermudanRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:mcoptions.BermudanRequest.config)
  
  ::mcoptions::SimulationConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::mcoptions::SimulationConfig* BermudanRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mcoptions::SimulationConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::mcoptions::SimulationConfig* BermudanRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:mcoptions.BermudanRequest.config)
  return _internal_mutable_config();
}
inline void BermudanRequest::set_allocated_config(::mcoptions::SimulationConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:mcoptions.BermudanRequest.config)
}

// -------------------------------------------------------------------

// PriceResponse

// double price = 1;
inline void PriceResponse::clear_price() {
  price_ = 0;
}
inline double PriceResponse::_internal_price() const {
  return price_;
}
inline double PriceResponse::price() const {
  // @@protoc_insertion_point(field_get:mcoptions.PriceResponse.price)
  return _internal_price();
}
inline void PriceResponse::_internal_set_price(double value) {
  
  price_ = value;
}
inline void PriceResponse::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:mcoptions.PriceResponse.price)
}

// double computation_time_ms = 2;
inline void PriceResponse::clear_computation_time_ms() {
  computation_time_ms_ = 0;
}
inline double PriceResponse::_internal_computation_time_ms() const {
  return computation_time_ms_;
}
inline double PriceResponse::computation_time_ms() const {
  // @@protoc_insertion_point(field_get:mcoptions.PriceResponse.computation_time_ms)
  return _internal_computation_time_ms();
}
inline void PriceResponse::_internal_set_computation_time_ms(double value) {
  
  computation_time_ms_ = value;
}
inline void PriceResponse::set_computation_time_ms(double value) {
  _internal_set_computation_time_ms(value);
  // @@protoc_insertion_point(field_set:mcoptions.PriceResponse.computation_time_ms)
}

// string error_message = 3;
inline void PriceResponse::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PriceResponse::error_message() const {
  // @@protoc_insertion_point(field_get:mcoptions.PriceResponse.error_message)
  return _internal_error_message();
}
inline void PriceResponse::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:mcoptions.PriceResponse.error_message)
}
inline std::string* PriceResponse::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:mcoptions.PriceResponse.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& PriceResponse::_internal_error_message() const {
  return error_message_.Get();
}
inline void PriceResponse::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PriceResponse::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mcoptions.PriceResponse.error_message)
}
inline void PriceResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mcoptions.PriceResponse.error_message)
}
inline void PriceResponse::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mcoptions.PriceResponse.error_message)
}
inline std::string* PriceResponse::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PriceResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:mcoptions.PriceResponse.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PriceResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mcoptions.PriceResponse.error_message)
}
inline std::string* PriceResponse::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mcoptions.PriceResponse.error_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PriceResponse::unsafe_arena_set_allocated_error_message(
    std::string* error_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcoptions.PriceResponse.error_message)
}

// -------------------------------------------------------------------

// BatchRequest

// repeated .mcoptions.EuropeanRequest european_calls = 1;
inline int BatchRequest::_internal_european_calls_size() const {
  return european_calls_.size();
}
inline int BatchRequest::european_calls_size() const {
  return _internal_european_calls_size();
}
inline void BatchRequest::clear_european_calls() {
  european_calls_.Clear();
}
inline ::mcoptions::EuropeanRequest* BatchRequest::mutable_european_calls(int index) {
  // @@protoc_insertion_point(field_mutable:mcoptions.BatchRequest.european_calls)
  return european_calls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest >*
BatchRequest::mutable_european_calls() {
  // @@protoc_insertion_point(field_mutable_list:mcoptions.BatchRequest.european_calls)
  return &european_calls_;
}
inline const ::mcoptions::EuropeanRequest& BatchRequest::_internal_european_calls(int index) const {
  return european_calls_.Get(index);
}
inline const ::mcoptions::EuropeanRequest& BatchRequest::european_calls(int index) const {
  // @@protoc_insertion_point(field_get:mcoptions.BatchRequest.european_calls)
  return _internal_european_calls(index);
}
inline ::mcoptions::EuropeanRequest* BatchRequest::_internal_add_european_calls() {
  return european_calls_.Add();
}
inline ::mcoptions::EuropeanRequest* BatchRequest::add_european_calls() {
  // @@protoc_insertion_point(field_add:mcoptions.BatchRequest.european_calls)
  return _internal_add_european_calls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest >&
BatchRequest::european_calls() const {
  // @@protoc_insertion_point(field_list:mcoptions.BatchRequest.european_calls)
  return european_calls_;
}

// repeated .mcoptions.EuropeanRequest european_puts = 2;
inline int BatchRequest::_internal_european_puts_size() const {
  return european_puts_.size();
}
inline int BatchRequest::european_puts_size() const {
  return _internal_european_puts_size();
}
inline void BatchRequest::clear_european_puts() {
  european_puts_.Clear();
}
inline ::mcoptions::EuropeanRequest* BatchRequest::mutable_european_puts(int index) {
  // @@protoc_insertion_point(field_mutable:mcoptions.BatchRequest.european_puts)
  return european_puts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest >*
BatchRequest::mutable_european_puts() {
  // @@protoc_insertion_point(field_mutable_list:mcoptions.BatchRequest.european_puts)
  return &european_puts_;
}
inline const ::mcoptions::EuropeanRequest& BatchRequest::_internal_european_puts(int index) const {
  return european_puts_.Get(index);
}
inline const ::mcoptions::EuropeanRequest& BatchRequest::european_puts(int index) const {
  // @@protoc_insertion_point(field_get:mcoptions.BatchRequest.european_puts)
  return _internal_european_puts(index);
}
inline ::mcoptions::EuropeanRequest* BatchRequest::_internal_add_european_puts() {
  return european_puts_.Add();
}
inline ::mcoptions::EuropeanRequest* BatchRequest::add_european_puts() {
  // @@protoc_insertion_point(field_add:mcoptions.BatchRequest.european_puts)
  return _internal_add_european_puts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mcoptions::EuropeanRequest >&
BatchRequest::european_puts() const {
  // @@protoc_insertion_point(field_list:mcoptions.BatchRequest.european_puts)
  return european_puts_;
}

// .mcoptions.SimulationConfig config = 3;
inline bool BatchRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool BatchRequest::has_config() const {
  return _internal_has_config();
}
inline void BatchRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::mcoptions::SimulationConfig& BatchRequest::_internal_config() const {
  const ::mcoptions::SimulationConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mcoptions::SimulationConfig*>(
      &::mcoptions::_SimulationConfig_default_instance_);
}
inline const ::mcoptions::SimulationConfig& BatchRequest::config() const {
  // @@protoc_insertion_point(field_get:mcoptions.BatchRequest.config)
  return _internal_config();
}
inline void BatchRequest::unsafe_arena_set_allocated_config(
    ::mcoptions::SimulationConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcoptions.BatchRequest.config)
}
inline ::mcoptions::SimulationConfig* BatchRequest::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mcoptions::SimulationConfig* BatchRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:mcoptions.BatchRequest.config)
  
  ::mcoptions::SimulationConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::mcoptions::SimulationConfig* BatchRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mcoptions::SimulationConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::mcoptions::SimulationConfig* BatchRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:mcoptions.BatchRequest.config)
  return _internal_mutable_config();
}
inline void BatchRequest::set_allocated_config(::mcoptions::SimulationConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:mcoptions.BatchRequest.config)
}

// -------------------------------------------------------------------

// BatchResponse

// repeated double european_call_prices = 1;
inline int BatchResponse::_internal_european_call_prices_size() const {
  return european_call_prices_.size();
}
inline int BatchResponse::european_call_prices_size() const {
  return _internal_european_call_prices_size();
}
inline void BatchResponse::clear_european_call_prices() {
  european_call_prices_.Clear();
}
inline double BatchResponse::_internal_european_call_prices(int index) const {
  return european_call_prices_.Get(index);
}
inline double BatchResponse::european_call_prices(int index) const {
  // @@protoc_insertion_point(field_get:mcoptions.BatchResponse.european_call_prices)
  return _internal_european_call_prices(index);
}
inline void BatchResponse::set_european_call_prices(int index, double value) {
  european_call_prices_.Set(index, value);
  // @@protoc_insertion_point(field_set:mcoptions.BatchResponse.european_call_prices)
}
inline void BatchResponse::_internal_add_european_call_prices(double value) {
  european_call_prices_.Add(value);
}
inline void BatchResponse::add_european_call_prices(double value) {
  _internal_add_european_call_prices(value);
  // @@protoc_insertion_point(field_add:mcoptions.BatchResponse.european_call_prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BatchResponse::_internal_european_call_prices() const {
  return european_call_prices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BatchResponse::european_call_prices() const {
  // @@protoc_insertion_point(field_list:mcoptions.BatchResponse.european_call_prices)
  return _internal_european_call_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BatchResponse::_internal_mutable_european_call_prices() {
  return &european_call_prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BatchResponse::mutable_european_call_prices() {
  // @@protoc_insertion_point(field_mutable_list:mcoptions.BatchResponse.european_call_prices)
  return _internal_mutable_european_call_prices();
}

// repeated double european_put_prices = 2;
inline int BatchResponse::_internal_european_put_prices_size() const {
  return european_put_prices_.size();
}
inline int BatchResponse::european_put_prices_size() const {
  return _internal_european_put_prices_size();
}
inline void BatchResponse::clear_european_put_prices() {
  european_put_prices_.Clear();
}
inline double BatchResponse::_internal_european_put_prices(int index) const {
  return european_put_prices_.Get(index);
}
inline double BatchResponse::european_put_prices(int index) const {
  // @@protoc_insertion_point(field_get:mcoptions.BatchResponse.european_put_prices)
  return _internal_european_put_prices(index);
}
inline void BatchResponse::set_european_put_prices(int index, double value) {
  european_put_prices_.Set(index, value);
  // @@protoc_insertion_point(field_set:mcoptions.BatchResponse.european_put_prices)
}
inline void BatchResponse::_internal_add_european_put_prices(double value) {
  european_put_prices_.Add(value);
}
inline void BatchResponse::add_european_put_prices(double value) {
  _internal_add_european_put_prices(value);
  // @@protoc_insertion_point(field_add:mcoptions.BatchResponse.european_put_prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BatchResponse::_internal_european_put_prices() const {
  return european_put_prices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BatchResponse::european_put_prices() const {
  // @@protoc_insertion_point(field_list:mcoptions.BatchResponse.european_put_prices)
  return _internal_european_put_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BatchResponse::_internal_mutable_european_put_prices() {
  return &european_put_prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BatchResponse::mutable_european_put_prices() {
  // @@protoc_insertion_point(field_mutable_list:mcoptions.BatchResponse.european_put_prices)
  return _internal_mutable_european_put_prices();
}

// double total_computation_time_ms = 3;
inline void BatchResponse::clear_total_computation_time_ms() {
  total_computation_time_ms_ = 0;
}
inline double BatchResponse::_internal_total_computation_time_ms() const {
  return total_computation_time_ms_;
}
inline double BatchResponse::total_computation_time_ms() const {
  // @@protoc_insertion_point(field_get:mcoptions.BatchResponse.total_computation_time_ms)
  return _internal_total_computation_time_ms();
}
inline void BatchResponse::_internal_set_total_computation_time_ms(double value) {
  
  total_computation_time_ms_ = value;
}
inline void BatchResponse::set_total_computation_time_ms(double value) {
  _internal_set_total_computation_time_ms(value);
  // @@protoc_insertion_point(field_set:mcoptions.BatchResponse.total_computation_time_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mcoptions

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mcoptions::BarrierType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mcoptions::BarrierType>() {
  return ::mcoptions::BarrierType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mcoptions_2eproto
