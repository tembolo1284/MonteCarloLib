// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mcoptions.proto

#include "mcoptions.pb.h"
#include "mcoptions.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mcoptions {

static const char* McOptionsService_method_names[] = {
  "/mcoptions.McOptionsService/PriceEuropeanCall",
  "/mcoptions.McOptionsService/PriceEuropeanPut",
  "/mcoptions.McOptionsService/PriceAmericanCall",
  "/mcoptions.McOptionsService/PriceAmericanPut",
  "/mcoptions.McOptionsService/PriceAsianCall",
  "/mcoptions.McOptionsService/PriceAsianPut",
  "/mcoptions.McOptionsService/PriceBarrierCall",
  "/mcoptions.McOptionsService/PriceBarrierPut",
  "/mcoptions.McOptionsService/PriceLookbackCall",
  "/mcoptions.McOptionsService/PriceLookbackPut",
  "/mcoptions.McOptionsService/PriceBermudanCall",
  "/mcoptions.McOptionsService/PriceBermudanPut",
  "/mcoptions.McOptionsService/PriceBatch",
};

std::unique_ptr< McOptionsService::Stub> McOptionsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< McOptionsService::Stub> stub(new McOptionsService::Stub(channel));
  return stub;
}

McOptionsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PriceEuropeanCall_(McOptionsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceEuropeanPut_(McOptionsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceAmericanCall_(McOptionsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceAmericanPut_(McOptionsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceAsianCall_(McOptionsService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceAsianPut_(McOptionsService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceBarrierCall_(McOptionsService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceBarrierPut_(McOptionsService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceLookbackCall_(McOptionsService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceLookbackPut_(McOptionsService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceBermudanCall_(McOptionsService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceBermudanPut_(McOptionsService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceBatch_(McOptionsService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status McOptionsService::Stub::PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceEuropeanCall_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceEuropeanCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceEuropeanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceEuropeanCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceEuropeanCall_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceEuropeanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceEuropeanCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceEuropeanCallRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceEuropeanCall_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceEuropeanCallRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceEuropeanCall_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceEuropeanPut_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceEuropeanPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceEuropeanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceEuropeanPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceEuropeanPut_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceEuropeanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceEuropeanPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceEuropeanPutRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceEuropeanPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceEuropeanPutRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceEuropeanPut_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceAmericanCall_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceAmericanCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceAmericanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceAmericanCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceAmericanCall_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceAmericanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceAmericanCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceAmericanCallRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceAmericanCall_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceAmericanCallRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceAmericanCall_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceAmericanPut_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceAmericanPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceAmericanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceAmericanPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceAmericanPut_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceAmericanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceAmericanPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceAmericanPutRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceAmericanPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceAmericanPutRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceAmericanPut_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceAsianCall_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceAsianCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceAsianCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceAsianCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceAsianCall_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceAsianCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceAsianCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceAsianCallRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceAsianCall_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceAsianCallRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceAsianCall_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceAsianPut_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceAsianPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceAsianPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceAsianPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceAsianPut_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceAsianPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceAsianPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceAsianPutRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceAsianPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceAsianPutRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceAsianPut_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceBarrierCall_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBarrierCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBarrierCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBarrierCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBarrierCall_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceBarrierCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBarrierCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceBarrierCallRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceBarrierCall_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceBarrierCallRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceBarrierCall_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceBarrierPut_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBarrierPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBarrierPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBarrierPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBarrierPut_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceBarrierPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBarrierPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceBarrierPutRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceBarrierPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceBarrierPutRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceBarrierPut_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceLookbackCall_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceLookbackCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceLookbackCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceLookbackCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceLookbackCall_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceLookbackCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceLookbackCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceLookbackCallRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceLookbackCall_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceLookbackCallRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceLookbackCall_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceLookbackPut_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceLookbackPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceLookbackPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceLookbackPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceLookbackPut_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceLookbackPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceLookbackPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceLookbackPutRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceLookbackPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceLookbackPutRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceLookbackPut_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceBermudanCall_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBermudanCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBermudanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBermudanCall_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBermudanCall_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceBermudanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBermudanCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceBermudanCallRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceBermudanCall_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceBermudanCallRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceBermudanCall_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::mcoptions::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceBermudanPut_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBermudanPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBermudanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBermudanPut_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBermudanPut_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceBermudanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBermudanPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::AsyncPriceBermudanPutRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceBermudanPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* McOptionsService::Stub::PrepareAsyncPriceBermudanPutRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::PriceResponse>::Create(channel_.get(), cq, rpcmethod_PriceBermudanPut_, context, request, false);
}

::grpc::Status McOptionsService::Stub::PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::mcoptions::BatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceBatch_, context, request, response);
}

void McOptionsService::Stub::experimental_async::PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBatch_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::BatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PriceBatch_, context, request, response, std::move(f));
}

void McOptionsService::Stub::experimental_async::PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBatch_, context, request, response, reactor);
}

void McOptionsService::Stub::experimental_async::PriceBatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::BatchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PriceBatch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::BatchResponse>* McOptionsService::Stub::AsyncPriceBatchRaw(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::BatchResponse>::Create(channel_.get(), cq, rpcmethod_PriceBatch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mcoptions::BatchResponse>* McOptionsService::Stub::PrepareAsyncPriceBatchRaw(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mcoptions::BatchResponse>::Create(channel_.get(), cq, rpcmethod_PriceBatch_, context, request, false);
}

McOptionsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::EuropeanRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceEuropeanCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::EuropeanRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceEuropeanPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::AmericanRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceAmericanCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::AmericanRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceAmericanPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::AsianRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceAsianCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::AsianRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceAsianPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::BarrierRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceBarrierCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::BarrierRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceBarrierPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::LookbackRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceLookbackCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::LookbackRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceLookbackPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::BermudanRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceBermudanCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::BermudanRequest* req,
             ::mcoptions::PriceResponse* resp) {
               return service->PriceBermudanPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      McOptionsService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< McOptionsService::Service, ::mcoptions::BatchRequest, ::mcoptions::BatchResponse>(
          [](McOptionsService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::mcoptions::BatchRequest* req,
             ::mcoptions::BatchResponse* resp) {
               return service->PriceBatch(ctx, req, resp);
             }, this)));
}

McOptionsService::Service::~Service() {
}

::grpc::Status McOptionsService::Service::PriceEuropeanCall(::grpc::ServerContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceEuropeanPut(::grpc::ServerContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceAmericanCall(::grpc::ServerContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceAmericanPut(::grpc::ServerContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceAsianCall(::grpc::ServerContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceAsianPut(::grpc::ServerContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceBarrierCall(::grpc::ServerContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceBarrierPut(::grpc::ServerContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceLookbackCall(::grpc::ServerContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceLookbackPut(::grpc::ServerContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceBermudanCall(::grpc::ServerContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceBermudanPut(::grpc::ServerContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status McOptionsService::Service::PriceBatch(::grpc::ServerContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mcoptions

