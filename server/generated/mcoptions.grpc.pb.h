// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mcoptions.proto
#ifndef GRPC_mcoptions_2eproto__INCLUDED
#define GRPC_mcoptions_2eproto__INCLUDED

#include "mcoptions.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mcoptions {

// Monte Carlo Options Pricing Service
class McOptionsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mcoptions.McOptionsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // European Options
    virtual ::grpc::Status PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceEuropeanCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceEuropeanCallRaw(context, request, cq));
    }
    virtual ::grpc::Status PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceEuropeanPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceEuropeanPutRaw(context, request, cq));
    }
    // American Options
    virtual ::grpc::Status PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceAmericanCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceAmericanCallRaw(context, request, cq));
    }
    virtual ::grpc::Status PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceAmericanPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceAmericanPutRaw(context, request, cq));
    }
    // Asian Options
    virtual ::grpc::Status PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceAsianCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceAsianCallRaw(context, request, cq));
    }
    virtual ::grpc::Status PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceAsianPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceAsianPutRaw(context, request, cq));
    }
    // Barrier Options
    virtual ::grpc::Status PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceBarrierCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceBarrierCallRaw(context, request, cq));
    }
    virtual ::grpc::Status PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceBarrierPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceBarrierPutRaw(context, request, cq));
    }
    // Lookback Options
    virtual ::grpc::Status PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceLookbackCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceLookbackCallRaw(context, request, cq));
    }
    virtual ::grpc::Status PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceLookbackPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceLookbackPutRaw(context, request, cq));
    }
    // Bermudan Options
    virtual ::grpc::Status PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceBermudanCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceBermudanCallRaw(context, request, cq));
    }
    virtual ::grpc::Status PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::mcoptions::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> AsyncPriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(AsyncPriceBermudanPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>> PrepareAsyncPriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>>(PrepareAsyncPriceBermudanPutRaw(context, request, cq));
    }
    // Batch pricing
    virtual ::grpc::Status PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::mcoptions::BatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::BatchResponse>> AsyncPriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::BatchResponse>>(AsyncPriceBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::BatchResponse>> PrepareAsyncPriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::BatchResponse>>(PrepareAsyncPriceBatchRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // European Options
      virtual void PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceEuropeanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceEuropeanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceEuropeanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceEuropeanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceEuropeanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceEuropeanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // American Options
      virtual void PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceAmericanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceAmericanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceAmericanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceAmericanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceAmericanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceAmericanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Asian Options
      virtual void PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceAsianCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceAsianCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceAsianCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceAsianPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceAsianPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceAsianPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Barrier Options
      virtual void PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceBarrierCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBarrierCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBarrierCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceBarrierPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBarrierPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBarrierPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lookback Options
      virtual void PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceLookbackCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceLookbackCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceLookbackCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceLookbackPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceLookbackPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceLookbackPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Bermudan Options
      virtual void PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceBermudanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBermudanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBermudanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceBermudanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBermudanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBermudanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Batch pricing
      virtual void PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceBatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::BatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PriceBatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::BatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PriceBatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::BatchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceEuropeanCallRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceEuropeanCallRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceEuropeanPutRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceEuropeanPutRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceAmericanCallRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceAmericanCallRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceAmericanPutRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceAmericanPutRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceAsianCallRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceAsianCallRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceAsianPutRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceAsianPutRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceBarrierCallRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceBarrierCallRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceBarrierPutRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceBarrierPutRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceLookbackCallRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceLookbackCallRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceLookbackPutRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceLookbackPutRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceBermudanCallRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceBermudanCallRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* AsyncPriceBermudanPutRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::PriceResponse>* PrepareAsyncPriceBermudanPutRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::BatchResponse>* AsyncPriceBatchRaw(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mcoptions::BatchResponse>* PrepareAsyncPriceBatchRaw(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceEuropeanCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceEuropeanCallRaw(context, request, cq));
    }
    ::grpc::Status PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceEuropeanPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceEuropeanPutRaw(context, request, cq));
    }
    ::grpc::Status PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceAmericanCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceAmericanCallRaw(context, request, cq));
    }
    ::grpc::Status PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceAmericanPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceAmericanPutRaw(context, request, cq));
    }
    ::grpc::Status PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceAsianCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceAsianCallRaw(context, request, cq));
    }
    ::grpc::Status PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceAsianPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceAsianPutRaw(context, request, cq));
    }
    ::grpc::Status PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceBarrierCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceBarrierCallRaw(context, request, cq));
    }
    ::grpc::Status PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceBarrierPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceBarrierPutRaw(context, request, cq));
    }
    ::grpc::Status PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceLookbackCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceLookbackCallRaw(context, request, cq));
    }
    ::grpc::Status PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceLookbackPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceLookbackPutRaw(context, request, cq));
    }
    ::grpc::Status PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceBermudanCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceBermudanCallRaw(context, request, cq));
    }
    ::grpc::Status PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::mcoptions::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> AsyncPriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(AsyncPriceBermudanPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>> PrepareAsyncPriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>>(PrepareAsyncPriceBermudanPutRaw(context, request, cq));
    }
    ::grpc::Status PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::mcoptions::BatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::BatchResponse>> AsyncPriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::BatchResponse>>(AsyncPriceBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::BatchResponse>> PrepareAsyncPriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mcoptions::BatchResponse>>(PrepareAsyncPriceBatchRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceEuropeanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceEuropeanCall(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceEuropeanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceEuropeanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceEuropeanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceEuropeanPut(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceEuropeanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceEuropeanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceAmericanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceAmericanCall(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceAmericanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceAmericanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceAmericanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceAmericanPut(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceAmericanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceAmericanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceAsianCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceAsianCall(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceAsianCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceAsianCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceAsianPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceAsianPut(::grpc::ClientContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceAsianPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceAsianPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceBarrierCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBarrierCall(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBarrierCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBarrierCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceBarrierPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBarrierPut(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBarrierPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBarrierPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceLookbackCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceLookbackCall(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceLookbackCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceLookbackCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceLookbackPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceLookbackPut(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceLookbackPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceLookbackPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceBermudanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBermudanCall(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBermudanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBermudanCall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceBermudanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBermudanPut(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBermudanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBermudanPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::PriceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceBatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::BatchResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBatch(::grpc::ClientContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PriceBatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::BatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PriceBatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mcoptions::BatchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceEuropeanCallRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceEuropeanCallRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceEuropeanPutRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceEuropeanPutRaw(::grpc::ClientContext* context, const ::mcoptions::EuropeanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceAmericanCallRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceAmericanCallRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceAmericanPutRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceAmericanPutRaw(::grpc::ClientContext* context, const ::mcoptions::AmericanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceAsianCallRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceAsianCallRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceAsianPutRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceAsianPutRaw(::grpc::ClientContext* context, const ::mcoptions::AsianRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceBarrierCallRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceBarrierCallRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceBarrierPutRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceBarrierPutRaw(::grpc::ClientContext* context, const ::mcoptions::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceLookbackCallRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceLookbackCallRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceLookbackPutRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceLookbackPutRaw(::grpc::ClientContext* context, const ::mcoptions::LookbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceBermudanCallRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceBermudanCallRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* AsyncPriceBermudanPutRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::PriceResponse>* PrepareAsyncPriceBermudanPutRaw(::grpc::ClientContext* context, const ::mcoptions::BermudanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::BatchResponse>* AsyncPriceBatchRaw(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mcoptions::BatchResponse>* PrepareAsyncPriceBatchRaw(::grpc::ClientContext* context, const ::mcoptions::BatchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PriceEuropeanCall_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceEuropeanPut_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceAmericanCall_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceAmericanPut_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceAsianCall_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceAsianPut_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceBarrierCall_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceBarrierPut_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceLookbackCall_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceLookbackPut_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceBermudanCall_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceBermudanPut_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceBatch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // European Options
    virtual ::grpc::Status PriceEuropeanCall(::grpc::ServerContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response);
    virtual ::grpc::Status PriceEuropeanPut(::grpc::ServerContext* context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response);
    // American Options
    virtual ::grpc::Status PriceAmericanCall(::grpc::ServerContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response);
    virtual ::grpc::Status PriceAmericanPut(::grpc::ServerContext* context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response);
    // Asian Options
    virtual ::grpc::Status PriceAsianCall(::grpc::ServerContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response);
    virtual ::grpc::Status PriceAsianPut(::grpc::ServerContext* context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response);
    // Barrier Options
    virtual ::grpc::Status PriceBarrierCall(::grpc::ServerContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response);
    virtual ::grpc::Status PriceBarrierPut(::grpc::ServerContext* context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response);
    // Lookback Options
    virtual ::grpc::Status PriceLookbackCall(::grpc::ServerContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response);
    virtual ::grpc::Status PriceLookbackPut(::grpc::ServerContext* context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response);
    // Bermudan Options
    virtual ::grpc::Status PriceBermudanCall(::grpc::ServerContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response);
    virtual ::grpc::Status PriceBermudanPut(::grpc::ServerContext* context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response);
    // Batch pricing
    virtual ::grpc::Status PriceBatch(::grpc::ServerContext* context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceEuropeanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceEuropeanCall() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PriceEuropeanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceEuropeanCall(::grpc::ServerContext* context, ::mcoptions::EuropeanRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceEuropeanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceEuropeanPut() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PriceEuropeanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceEuropeanPut(::grpc::ServerContext* context, ::mcoptions::EuropeanRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceAmericanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceAmericanCall() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PriceAmericanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceAmericanCall(::grpc::ServerContext* context, ::mcoptions::AmericanRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceAmericanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceAmericanPut() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PriceAmericanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceAmericanPut(::grpc::ServerContext* context, ::mcoptions::AmericanRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceAsianCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceAsianCall() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PriceAsianCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceAsianCall(::grpc::ServerContext* context, ::mcoptions::AsianRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceAsianPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceAsianPut() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PriceAsianPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceAsianPut(::grpc::ServerContext* context, ::mcoptions::AsianRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceBarrierCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceBarrierCall() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PriceBarrierCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBarrierCall(::grpc::ServerContext* context, ::mcoptions::BarrierRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceBarrierPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceBarrierPut() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_PriceBarrierPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBarrierPut(::grpc::ServerContext* context, ::mcoptions::BarrierRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceLookbackCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceLookbackCall() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PriceLookbackCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackCall(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceLookbackCall(::grpc::ServerContext* context, ::mcoptions::LookbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceLookbackPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceLookbackPut() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_PriceLookbackPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackPut(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceLookbackPut(::grpc::ServerContext* context, ::mcoptions::LookbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceBermudanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceBermudanCall() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_PriceBermudanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBermudanCall(::grpc::ServerContext* context, ::mcoptions::BermudanRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceBermudanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceBermudanPut() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_PriceBermudanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBermudanPut(::grpc::ServerContext* context, ::mcoptions::BermudanRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceBatch() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_PriceBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBatch(::grpc::ServerContext* /*context*/, const ::mcoptions::BatchRequest* /*request*/, ::mcoptions::BatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBatch(::grpc::ServerContext* context, ::mcoptions::BatchRequest* request, ::grpc::ServerAsyncResponseWriter< ::mcoptions::BatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PriceEuropeanCall<WithAsyncMethod_PriceEuropeanPut<WithAsyncMethod_PriceAmericanCall<WithAsyncMethod_PriceAmericanPut<WithAsyncMethod_PriceAsianCall<WithAsyncMethod_PriceAsianPut<WithAsyncMethod_PriceBarrierCall<WithAsyncMethod_PriceBarrierPut<WithAsyncMethod_PriceLookbackCall<WithAsyncMethod_PriceLookbackPut<WithAsyncMethod_PriceBermudanCall<WithAsyncMethod_PriceBermudanPut<WithAsyncMethod_PriceBatch<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceEuropeanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceEuropeanCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceEuropeanCall(context, request, response); }));}
    void SetMessageAllocatorFor_PriceEuropeanCall(
        ::grpc::experimental::MessageAllocator< ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceEuropeanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceEuropeanCall(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceEuropeanCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceEuropeanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceEuropeanPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::EuropeanRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceEuropeanPut(context, request, response); }));}
    void SetMessageAllocatorFor_PriceEuropeanPut(
        ::grpc::experimental::MessageAllocator< ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceEuropeanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceEuropeanPut(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceEuropeanPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceAmericanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceAmericanCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceAmericanCall(context, request, response); }));}
    void SetMessageAllocatorFor_PriceAmericanCall(
        ::grpc::experimental::MessageAllocator< ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceAmericanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceAmericanCall(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceAmericanCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceAmericanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceAmericanPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::AmericanRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceAmericanPut(context, request, response); }));}
    void SetMessageAllocatorFor_PriceAmericanPut(
        ::grpc::experimental::MessageAllocator< ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceAmericanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceAmericanPut(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceAmericanPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceAsianCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceAsianCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceAsianCall(context, request, response); }));}
    void SetMessageAllocatorFor_PriceAsianCall(
        ::grpc::experimental::MessageAllocator< ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceAsianCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceAsianCall(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceAsianCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceAsianPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceAsianPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::AsianRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceAsianPut(context, request, response); }));}
    void SetMessageAllocatorFor_PriceAsianPut(
        ::grpc::experimental::MessageAllocator< ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceAsianPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceAsianPut(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceAsianPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceBarrierCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceBarrierCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceBarrierCall(context, request, response); }));}
    void SetMessageAllocatorFor_PriceBarrierCall(
        ::grpc::experimental::MessageAllocator< ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceBarrierCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBarrierCall(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBarrierCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceBarrierPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceBarrierPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::BarrierRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceBarrierPut(context, request, response); }));}
    void SetMessageAllocatorFor_PriceBarrierPut(
        ::grpc::experimental::MessageAllocator< ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceBarrierPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBarrierPut(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBarrierPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceLookbackCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceLookbackCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceLookbackCall(context, request, response); }));}
    void SetMessageAllocatorFor_PriceLookbackCall(
        ::grpc::experimental::MessageAllocator< ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceLookbackCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackCall(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceLookbackCall(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceLookbackCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceLookbackPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceLookbackPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::LookbackRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceLookbackPut(context, request, response); }));}
    void SetMessageAllocatorFor_PriceLookbackPut(
        ::grpc::experimental::MessageAllocator< ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceLookbackPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackPut(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceLookbackPut(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceLookbackPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceBermudanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceBermudanCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceBermudanCall(context, request, response); }));}
    void SetMessageAllocatorFor_PriceBermudanCall(
        ::grpc::experimental::MessageAllocator< ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceBermudanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBermudanCall(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBermudanCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceBermudanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceBermudanPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::BermudanRequest* request, ::mcoptions::PriceResponse* response) { return this->PriceBermudanPut(context, request, response); }));}
    void SetMessageAllocatorFor_PriceBermudanPut(
        ::grpc::experimental::MessageAllocator< ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceBermudanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBermudanPut(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBermudanPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PriceBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PriceBatch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BatchRequest, ::mcoptions::BatchResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::mcoptions::BatchRequest* request, ::mcoptions::BatchResponse* response) { return this->PriceBatch(context, request, response); }));}
    void SetMessageAllocatorFor_PriceBatch(
        ::grpc::experimental::MessageAllocator< ::mcoptions::BatchRequest, ::mcoptions::BatchResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mcoptions::BatchRequest, ::mcoptions::BatchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PriceBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBatch(::grpc::ServerContext* /*context*/, const ::mcoptions::BatchRequest* /*request*/, ::mcoptions::BatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::mcoptions::BatchRequest* /*request*/, ::mcoptions::BatchResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBatch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::mcoptions::BatchRequest* /*request*/, ::mcoptions::BatchResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_PriceEuropeanCall<ExperimentalWithCallbackMethod_PriceEuropeanPut<ExperimentalWithCallbackMethod_PriceAmericanCall<ExperimentalWithCallbackMethod_PriceAmericanPut<ExperimentalWithCallbackMethod_PriceAsianCall<ExperimentalWithCallbackMethod_PriceAsianPut<ExperimentalWithCallbackMethod_PriceBarrierCall<ExperimentalWithCallbackMethod_PriceBarrierPut<ExperimentalWithCallbackMethod_PriceLookbackCall<ExperimentalWithCallbackMethod_PriceLookbackPut<ExperimentalWithCallbackMethod_PriceBermudanCall<ExperimentalWithCallbackMethod_PriceBermudanPut<ExperimentalWithCallbackMethod_PriceBatch<Service > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_PriceEuropeanCall<ExperimentalWithCallbackMethod_PriceEuropeanPut<ExperimentalWithCallbackMethod_PriceAmericanCall<ExperimentalWithCallbackMethod_PriceAmericanPut<ExperimentalWithCallbackMethod_PriceAsianCall<ExperimentalWithCallbackMethod_PriceAsianPut<ExperimentalWithCallbackMethod_PriceBarrierCall<ExperimentalWithCallbackMethod_PriceBarrierPut<ExperimentalWithCallbackMethod_PriceLookbackCall<ExperimentalWithCallbackMethod_PriceLookbackPut<ExperimentalWithCallbackMethod_PriceBermudanCall<ExperimentalWithCallbackMethod_PriceBermudanPut<ExperimentalWithCallbackMethod_PriceBatch<Service > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PriceEuropeanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceEuropeanCall() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PriceEuropeanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceEuropeanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceEuropeanPut() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PriceEuropeanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceAmericanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceAmericanCall() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PriceAmericanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceAmericanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceAmericanPut() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PriceAmericanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceAsianCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceAsianCall() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PriceAsianCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceAsianPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceAsianPut() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PriceAsianPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceBarrierCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceBarrierCall() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PriceBarrierCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceBarrierPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceBarrierPut() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_PriceBarrierPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceLookbackCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceLookbackCall() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PriceLookbackCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackCall(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceLookbackPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceLookbackPut() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_PriceLookbackPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackPut(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceBermudanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceBermudanCall() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_PriceBermudanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceBermudanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceBermudanPut() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_PriceBermudanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceBatch() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_PriceBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBatch(::grpc::ServerContext* /*context*/, const ::mcoptions::BatchRequest* /*request*/, ::mcoptions::BatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceEuropeanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceEuropeanCall() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PriceEuropeanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceEuropeanCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceEuropeanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceEuropeanPut() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PriceEuropeanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceEuropeanPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceAmericanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceAmericanCall() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PriceAmericanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceAmericanCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceAmericanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceAmericanPut() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PriceAmericanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceAmericanPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceAsianCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceAsianCall() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PriceAsianCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceAsianCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceAsianPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceAsianPut() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PriceAsianPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceAsianPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceBarrierCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceBarrierCall() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_PriceBarrierCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBarrierCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceBarrierPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceBarrierPut() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_PriceBarrierPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBarrierPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceLookbackCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceLookbackCall() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PriceLookbackCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackCall(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceLookbackCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceLookbackPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceLookbackPut() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_PriceLookbackPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackPut(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceLookbackPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceBermudanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceBermudanCall() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_PriceBermudanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBermudanCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceBermudanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceBermudanPut() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_PriceBermudanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBermudanPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceBatch() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_PriceBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBatch(::grpc::ServerContext* /*context*/, const ::mcoptions::BatchRequest* /*request*/, ::mcoptions::BatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceBatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceEuropeanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceEuropeanCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceEuropeanCall(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceEuropeanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceEuropeanCall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceEuropeanCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceEuropeanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceEuropeanPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceEuropeanPut(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceEuropeanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceEuropeanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceEuropeanPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceEuropeanPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceAmericanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceAmericanCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceAmericanCall(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceAmericanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceAmericanCall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceAmericanCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceAmericanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceAmericanPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceAmericanPut(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceAmericanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAmericanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceAmericanPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceAmericanPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceAsianCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceAsianCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceAsianCall(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceAsianCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceAsianCall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceAsianCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceAsianPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceAsianPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceAsianPut(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceAsianPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceAsianPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceAsianPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceAsianPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceBarrierCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceBarrierCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceBarrierCall(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceBarrierCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBarrierCall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBarrierCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceBarrierPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceBarrierPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceBarrierPut(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceBarrierPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBarrierPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBarrierPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBarrierPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceLookbackCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceLookbackCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceLookbackCall(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceLookbackCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackCall(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceLookbackCall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceLookbackCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceLookbackPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceLookbackPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceLookbackPut(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceLookbackPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceLookbackPut(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceLookbackPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceLookbackPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceBermudanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceBermudanCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceBermudanCall(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceBermudanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBermudanCall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBermudanCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceBermudanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceBermudanPut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceBermudanPut(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceBermudanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBermudanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBermudanPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBermudanPut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PriceBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PriceBatch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceBatch(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PriceBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceBatch(::grpc::ServerContext* /*context*/, const ::mcoptions::BatchRequest* /*request*/, ::mcoptions::BatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PriceBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PriceBatch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceEuropeanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceEuropeanCall() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceEuropeanCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceEuropeanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceEuropeanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceEuropeanCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::EuropeanRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceEuropeanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceEuropeanPut() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::EuropeanRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceEuropeanPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceEuropeanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceEuropeanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::EuropeanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceEuropeanPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::EuropeanRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceAmericanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceAmericanCall() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceAmericanCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceAmericanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceAmericanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceAmericanCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::AmericanRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceAmericanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceAmericanPut() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::AmericanRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceAmericanPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceAmericanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceAmericanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AmericanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceAmericanPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::AmericanRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceAsianCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceAsianCall() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceAsianCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceAsianCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceAsianCall(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceAsianCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::AsianRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceAsianPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceAsianPut() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::AsianRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceAsianPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceAsianPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceAsianPut(::grpc::ServerContext* /*context*/, const ::mcoptions::AsianRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceAsianPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::AsianRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceBarrierCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceBarrierCall() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceBarrierCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceBarrierCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceBarrierCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceBarrierCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::BarrierRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceBarrierPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceBarrierPut() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::BarrierRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceBarrierPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceBarrierPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceBarrierPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BarrierRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceBarrierPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::BarrierRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceLookbackCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceLookbackCall() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceLookbackCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceLookbackCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceLookbackCall(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceLookbackCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::LookbackRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceLookbackPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceLookbackPut() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::LookbackRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceLookbackPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceLookbackPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceLookbackPut(::grpc::ServerContext* /*context*/, const ::mcoptions::LookbackRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceLookbackPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::LookbackRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceBermudanCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceBermudanCall() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceBermudanCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceBermudanCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceBermudanCall(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceBermudanCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::BermudanRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceBermudanPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceBermudanPut() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::BermudanRequest, ::mcoptions::PriceResponse>* streamer) {
                       return this->StreamedPriceBermudanPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceBermudanPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceBermudanPut(::grpc::ServerContext* /*context*/, const ::mcoptions::BermudanRequest* /*request*/, ::mcoptions::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceBermudanPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::BermudanRequest,::mcoptions::PriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceBatch() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mcoptions::BatchRequest, ::mcoptions::BatchResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::mcoptions::BatchRequest, ::mcoptions::BatchResponse>* streamer) {
                       return this->StreamedPriceBatch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceBatch(::grpc::ServerContext* /*context*/, const ::mcoptions::BatchRequest* /*request*/, ::mcoptions::BatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceBatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mcoptions::BatchRequest,::mcoptions::BatchResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PriceEuropeanCall<WithStreamedUnaryMethod_PriceEuropeanPut<WithStreamedUnaryMethod_PriceAmericanCall<WithStreamedUnaryMethod_PriceAmericanPut<WithStreamedUnaryMethod_PriceAsianCall<WithStreamedUnaryMethod_PriceAsianPut<WithStreamedUnaryMethod_PriceBarrierCall<WithStreamedUnaryMethod_PriceBarrierPut<WithStreamedUnaryMethod_PriceLookbackCall<WithStreamedUnaryMethod_PriceLookbackPut<WithStreamedUnaryMethod_PriceBermudanCall<WithStreamedUnaryMethod_PriceBermudanPut<WithStreamedUnaryMethod_PriceBatch<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PriceEuropeanCall<WithStreamedUnaryMethod_PriceEuropeanPut<WithStreamedUnaryMethod_PriceAmericanCall<WithStreamedUnaryMethod_PriceAmericanPut<WithStreamedUnaryMethod_PriceAsianCall<WithStreamedUnaryMethod_PriceAsianPut<WithStreamedUnaryMethod_PriceBarrierCall<WithStreamedUnaryMethod_PriceBarrierPut<WithStreamedUnaryMethod_PriceLookbackCall<WithStreamedUnaryMethod_PriceLookbackPut<WithStreamedUnaryMethod_PriceBermudanCall<WithStreamedUnaryMethod_PriceBermudanPut<WithStreamedUnaryMethod_PriceBatch<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace mcoptions


#endif  // GRPC_mcoptions_2eproto__INCLUDED
