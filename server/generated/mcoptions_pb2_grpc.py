# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import mcoptions_pb2 as mcoptions__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in mcoptions_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class McOptionsServiceStub(object):
    """Monte Carlo Options Pricing Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PriceEuropeanCall = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceEuropeanCall',
                request_serializer=mcoptions__pb2.EuropeanRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceEuropeanPut = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceEuropeanPut',
                request_serializer=mcoptions__pb2.EuropeanRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceAmericanCall = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceAmericanCall',
                request_serializer=mcoptions__pb2.AmericanRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceAmericanPut = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceAmericanPut',
                request_serializer=mcoptions__pb2.AmericanRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceAsianCall = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceAsianCall',
                request_serializer=mcoptions__pb2.AsianRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceAsianPut = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceAsianPut',
                request_serializer=mcoptions__pb2.AsianRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceBarrierCall = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceBarrierCall',
                request_serializer=mcoptions__pb2.BarrierRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceBarrierPut = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceBarrierPut',
                request_serializer=mcoptions__pb2.BarrierRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceLookbackCall = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceLookbackCall',
                request_serializer=mcoptions__pb2.LookbackRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceLookbackPut = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceLookbackPut',
                request_serializer=mcoptions__pb2.LookbackRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceBermudanCall = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceBermudanCall',
                request_serializer=mcoptions__pb2.BermudanRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceBermudanPut = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceBermudanPut',
                request_serializer=mcoptions__pb2.BermudanRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.PriceResponse.FromString,
                _registered_method=True)
        self.PriceBatch = channel.unary_unary(
                '/mcoptions.McOptionsService/PriceBatch',
                request_serializer=mcoptions__pb2.BatchRequest.SerializeToString,
                response_deserializer=mcoptions__pb2.BatchResponse.FromString,
                _registered_method=True)


class McOptionsServiceServicer(object):
    """Monte Carlo Options Pricing Service
    """

    def PriceEuropeanCall(self, request, context):
        """European Options
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceEuropeanPut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceAmericanCall(self, request, context):
        """American Options
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceAmericanPut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceAsianCall(self, request, context):
        """Asian Options
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceAsianPut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceBarrierCall(self, request, context):
        """Barrier Options
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceBarrierPut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceLookbackCall(self, request, context):
        """Lookback Options
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceLookbackPut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceBermudanCall(self, request, context):
        """Bermudan Options
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceBermudanPut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PriceBatch(self, request, context):
        """Batch pricing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_McOptionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PriceEuropeanCall': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceEuropeanCall,
                    request_deserializer=mcoptions__pb2.EuropeanRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceEuropeanPut': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceEuropeanPut,
                    request_deserializer=mcoptions__pb2.EuropeanRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceAmericanCall': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceAmericanCall,
                    request_deserializer=mcoptions__pb2.AmericanRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceAmericanPut': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceAmericanPut,
                    request_deserializer=mcoptions__pb2.AmericanRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceAsianCall': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceAsianCall,
                    request_deserializer=mcoptions__pb2.AsianRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceAsianPut': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceAsianPut,
                    request_deserializer=mcoptions__pb2.AsianRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceBarrierCall': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceBarrierCall,
                    request_deserializer=mcoptions__pb2.BarrierRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceBarrierPut': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceBarrierPut,
                    request_deserializer=mcoptions__pb2.BarrierRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceLookbackCall': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceLookbackCall,
                    request_deserializer=mcoptions__pb2.LookbackRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceLookbackPut': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceLookbackPut,
                    request_deserializer=mcoptions__pb2.LookbackRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceBermudanCall': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceBermudanCall,
                    request_deserializer=mcoptions__pb2.BermudanRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceBermudanPut': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceBermudanPut,
                    request_deserializer=mcoptions__pb2.BermudanRequest.FromString,
                    response_serializer=mcoptions__pb2.PriceResponse.SerializeToString,
            ),
            'PriceBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceBatch,
                    request_deserializer=mcoptions__pb2.BatchRequest.FromString,
                    response_serializer=mcoptions__pb2.BatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mcoptions.McOptionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mcoptions.McOptionsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class McOptionsService(object):
    """Monte Carlo Options Pricing Service
    """

    @staticmethod
    def PriceEuropeanCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceEuropeanCall',
            mcoptions__pb2.EuropeanRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceEuropeanPut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceEuropeanPut',
            mcoptions__pb2.EuropeanRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceAmericanCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceAmericanCall',
            mcoptions__pb2.AmericanRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceAmericanPut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceAmericanPut',
            mcoptions__pb2.AmericanRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceAsianCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceAsianCall',
            mcoptions__pb2.AsianRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceAsianPut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceAsianPut',
            mcoptions__pb2.AsianRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceBarrierCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceBarrierCall',
            mcoptions__pb2.BarrierRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceBarrierPut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceBarrierPut',
            mcoptions__pb2.BarrierRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceLookbackCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceLookbackCall',
            mcoptions__pb2.LookbackRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceLookbackPut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceLookbackPut',
            mcoptions__pb2.LookbackRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceBermudanCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceBermudanCall',
            mcoptions__pb2.BermudanRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceBermudanPut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceBermudanPut',
            mcoptions__pb2.BermudanRequest.SerializeToString,
            mcoptions__pb2.PriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PriceBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcoptions.McOptionsService/PriceBatch',
            mcoptions__pb2.BatchRequest.SerializeToString,
            mcoptions__pb2.BatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
