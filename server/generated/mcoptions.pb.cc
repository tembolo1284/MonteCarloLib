// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mcoptions.proto

#include "mcoptions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mcoptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EuropeanRequest_mcoptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mcoptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulationConfig_mcoptions_2eproto;
namespace mcoptions {
class SimulationConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationConfig> _instance;
} _SimulationConfig_default_instance_;
class EuropeanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EuropeanRequest> _instance;
} _EuropeanRequest_default_instance_;
class AmericanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmericanRequest> _instance;
} _AmericanRequest_default_instance_;
class AsianRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsianRequest> _instance;
} _AsianRequest_default_instance_;
class BarrierRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BarrierRequest> _instance;
} _BarrierRequest_default_instance_;
class LookbackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookbackRequest> _instance;
} _LookbackRequest_default_instance_;
class BermudanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BermudanRequest> _instance;
} _BermudanRequest_default_instance_;
class PriceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceResponse> _instance;
} _PriceResponse_default_instance_;
class BatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchRequest> _instance;
} _BatchRequest_default_instance_;
class BatchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchResponse> _instance;
} _BatchResponse_default_instance_;
}  // namespace mcoptions
static void InitDefaultsscc_info_AmericanRequest_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_AmericanRequest_default_instance_;
    new (ptr) ::mcoptions::AmericanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::AmericanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AmericanRequest_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AmericanRequest_mcoptions_2eproto}, {
      &scc_info_SimulationConfig_mcoptions_2eproto.base,}};

static void InitDefaultsscc_info_AsianRequest_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_AsianRequest_default_instance_;
    new (ptr) ::mcoptions::AsianRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::AsianRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AsianRequest_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AsianRequest_mcoptions_2eproto}, {
      &scc_info_SimulationConfig_mcoptions_2eproto.base,}};

static void InitDefaultsscc_info_BarrierRequest_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_BarrierRequest_default_instance_;
    new (ptr) ::mcoptions::BarrierRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::BarrierRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BarrierRequest_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BarrierRequest_mcoptions_2eproto}, {
      &scc_info_SimulationConfig_mcoptions_2eproto.base,}};

static void InitDefaultsscc_info_BatchRequest_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_BatchRequest_default_instance_;
    new (ptr) ::mcoptions::BatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::BatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchRequest_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BatchRequest_mcoptions_2eproto}, {
      &scc_info_EuropeanRequest_mcoptions_2eproto.base,
      &scc_info_SimulationConfig_mcoptions_2eproto.base,}};

static void InitDefaultsscc_info_BatchResponse_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_BatchResponse_default_instance_;
    new (ptr) ::mcoptions::BatchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::BatchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchResponse_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BatchResponse_mcoptions_2eproto}, {}};

static void InitDefaultsscc_info_BermudanRequest_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_BermudanRequest_default_instance_;
    new (ptr) ::mcoptions::BermudanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::BermudanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BermudanRequest_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BermudanRequest_mcoptions_2eproto}, {
      &scc_info_SimulationConfig_mcoptions_2eproto.base,}};

static void InitDefaultsscc_info_EuropeanRequest_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_EuropeanRequest_default_instance_;
    new (ptr) ::mcoptions::EuropeanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::EuropeanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EuropeanRequest_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EuropeanRequest_mcoptions_2eproto}, {
      &scc_info_SimulationConfig_mcoptions_2eproto.base,}};

static void InitDefaultsscc_info_LookbackRequest_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_LookbackRequest_default_instance_;
    new (ptr) ::mcoptions::LookbackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::LookbackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LookbackRequest_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LookbackRequest_mcoptions_2eproto}, {
      &scc_info_SimulationConfig_mcoptions_2eproto.base,}};

static void InitDefaultsscc_info_PriceResponse_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_PriceResponse_default_instance_;
    new (ptr) ::mcoptions::PriceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::PriceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceResponse_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriceResponse_mcoptions_2eproto}, {}};

static void InitDefaultsscc_info_SimulationConfig_mcoptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mcoptions::_SimulationConfig_default_instance_;
    new (ptr) ::mcoptions::SimulationConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mcoptions::SimulationConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulationConfig_mcoptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimulationConfig_mcoptions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mcoptions_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mcoptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mcoptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mcoptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::SimulationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::SimulationConfig, num_simulations_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::SimulationConfig, num_steps_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::SimulationConfig, seed_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::SimulationConfig, antithetic_enabled_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::SimulationConfig, control_variates_enabled_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::SimulationConfig, stratified_sampling_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::EuropeanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::EuropeanRequest, spot_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::EuropeanRequest, strike_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::EuropeanRequest, rate_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::EuropeanRequest, volatility_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::EuropeanRequest, time_to_maturity_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::EuropeanRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::AmericanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::AmericanRequest, spot_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AmericanRequest, strike_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AmericanRequest, rate_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AmericanRequest, volatility_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AmericanRequest, time_to_maturity_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AmericanRequest, num_exercise_points_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AmericanRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::AsianRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::AsianRequest, spot_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AsianRequest, strike_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AsianRequest, rate_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AsianRequest, volatility_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AsianRequest, time_to_maturity_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AsianRequest, num_observations_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::AsianRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, spot_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, strike_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, rate_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, volatility_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, time_to_maturity_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, barrier_level_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, barrier_type_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, rebate_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BarrierRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::LookbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::LookbackRequest, spot_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::LookbackRequest, strike_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::LookbackRequest, rate_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::LookbackRequest, volatility_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::LookbackRequest, time_to_maturity_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::LookbackRequest, fixed_strike_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::LookbackRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::BermudanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::BermudanRequest, spot_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BermudanRequest, strike_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BermudanRequest, rate_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BermudanRequest, volatility_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BermudanRequest, exercise_dates_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BermudanRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::PriceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::PriceResponse, price_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::PriceResponse, computation_time_ms_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::PriceResponse, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::BatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::BatchRequest, european_calls_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BatchRequest, european_puts_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BatchRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcoptions::BatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcoptions::BatchResponse, european_call_prices_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BatchResponse, european_put_prices_),
  PROTOBUF_FIELD_OFFSET(::mcoptions::BatchResponse, total_computation_time_ms_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mcoptions::SimulationConfig)},
  { 11, -1, sizeof(::mcoptions::EuropeanRequest)},
  { 22, -1, sizeof(::mcoptions::AmericanRequest)},
  { 34, -1, sizeof(::mcoptions::AsianRequest)},
  { 46, -1, sizeof(::mcoptions::BarrierRequest)},
  { 60, -1, sizeof(::mcoptions::LookbackRequest)},
  { 72, -1, sizeof(::mcoptions::BermudanRequest)},
  { 83, -1, sizeof(::mcoptions::PriceResponse)},
  { 91, -1, sizeof(::mcoptions::BatchRequest)},
  { 99, -1, sizeof(::mcoptions::BatchResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_SimulationConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_EuropeanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_AmericanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_AsianRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_BarrierRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_LookbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_BermudanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_PriceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_BatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcoptions::_BatchResponse_default_instance_),
};

const char descriptor_table_protodef_mcoptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017mcoptions.proto\022\tmcoptions\"\257\001\n\020Simulat"
  "ionConfig\022\027\n\017num_simulations\030\001 \001(\004\022\021\n\tnu"
  "m_steps\030\002 \001(\004\022\014\n\004seed\030\003 \001(\004\022\032\n\022antitheti"
  "c_enabled\030\004 \001(\010\022 \n\030control_variates_enab"
  "led\030\005 \001(\010\022#\n\033stratified_sampling_enabled"
  "\030\006 \001(\010\"\230\001\n\017EuropeanRequest\022\014\n\004spot\030\001 \001(\001"
  "\022\016\n\006strike\030\002 \001(\001\022\014\n\004rate\030\003 \001(\001\022\022\n\nvolati"
  "lity\030\004 \001(\001\022\030\n\020time_to_maturity\030\005 \001(\001\022+\n\006"
  "config\030\006 \001(\0132\033.mcoptions.SimulationConfi"
  "g\"\265\001\n\017AmericanRequest\022\014\n\004spot\030\001 \001(\001\022\016\n\006s"
  "trike\030\002 \001(\001\022\014\n\004rate\030\003 \001(\001\022\022\n\nvolatility\030"
  "\004 \001(\001\022\030\n\020time_to_maturity\030\005 \001(\001\022\033\n\023num_e"
  "xercise_points\030\006 \001(\r\022+\n\006config\030\007 \001(\0132\033.m"
  "coptions.SimulationConfig\"\257\001\n\014AsianReque"
  "st\022\014\n\004spot\030\001 \001(\001\022\016\n\006strike\030\002 \001(\001\022\014\n\004rate"
  "\030\003 \001(\001\022\022\n\nvolatility\030\004 \001(\001\022\030\n\020time_to_ma"
  "turity\030\005 \001(\001\022\030\n\020num_observations\030\006 \001(\r\022+"
  "\n\006config\030\007 \001(\0132\033.mcoptions.SimulationCon"
  "fig\"\354\001\n\016BarrierRequest\022\014\n\004spot\030\001 \001(\001\022\016\n\006"
  "strike\030\002 \001(\001\022\014\n\004rate\030\003 \001(\001\022\022\n\nvolatility"
  "\030\004 \001(\001\022\030\n\020time_to_maturity\030\005 \001(\001\022\025\n\rbarr"
  "ier_level\030\006 \001(\001\022,\n\014barrier_type\030\007 \001(\0162\026."
  "mcoptions.BarrierType\022\016\n\006rebate\030\010 \001(\001\022+\n"
  "\006config\030\t \001(\0132\033.mcoptions.SimulationConf"
  "ig\"\256\001\n\017LookbackRequest\022\014\n\004spot\030\001 \001(\001\022\016\n\006"
  "strike\030\002 \001(\001\022\014\n\004rate\030\003 \001(\001\022\022\n\nvolatility"
  "\030\004 \001(\001\022\030\n\020time_to_maturity\030\005 \001(\001\022\024\n\014fixe"
  "d_strike\030\006 \001(\010\022+\n\006config\030\007 \001(\0132\033.mcoptio"
  "ns.SimulationConfig\"\226\001\n\017BermudanRequest\022"
  "\014\n\004spot\030\001 \001(\001\022\016\n\006strike\030\002 \001(\001\022\014\n\004rate\030\003 "
  "\001(\001\022\022\n\nvolatility\030\004 \001(\001\022\026\n\016exercise_date"
  "s\030\005 \003(\001\022+\n\006config\030\006 \001(\0132\033.mcoptions.Simu"
  "lationConfig\"R\n\rPriceResponse\022\r\n\005price\030\001"
  " \001(\001\022\033\n\023computation_time_ms\030\002 \001(\001\022\025\n\rerr"
  "or_message\030\003 \001(\t\"\242\001\n\014BatchRequest\0222\n\016eur"
  "opean_calls\030\001 \003(\0132\032.mcoptions.EuropeanRe"
  "quest\0221\n\reuropean_puts\030\002 \003(\0132\032.mcoptions"
  ".EuropeanRequest\022+\n\006config\030\003 \001(\0132\033.mcopt"
  "ions.SimulationConfig\"m\n\rBatchResponse\022\034"
  "\n\024european_call_prices\030\001 \003(\001\022\033\n\023european"
  "_put_prices\030\002 \003(\001\022!\n\031total_computation_t"
  "ime_ms\030\003 \001(\001*O\n\013BarrierType\022\016\n\nUP_AND_OU"
  "T\020\000\022\r\n\tUP_AND_IN\020\001\022\020\n\014DOWN_AND_OUT\020\002\022\017\n\013"
  "DOWN_AND_IN\020\0032\301\007\n\020McOptionsService\022I\n\021Pr"
  "iceEuropeanCall\022\032.mcoptions.EuropeanRequ"
  "est\032\030.mcoptions.PriceResponse\022H\n\020PriceEu"
  "ropeanPut\022\032.mcoptions.EuropeanRequest\032\030."
  "mcoptions.PriceResponse\022I\n\021PriceAmerican"
  "Call\022\032.mcoptions.AmericanRequest\032\030.mcopt"
  "ions.PriceResponse\022H\n\020PriceAmericanPut\022\032"
  ".mcoptions.AmericanRequest\032\030.mcoptions.P"
  "riceResponse\022C\n\016PriceAsianCall\022\027.mcoptio"
  "ns.AsianRequest\032\030.mcoptions.PriceRespons"
  "e\022B\n\rPriceAsianPut\022\027.mcoptions.AsianRequ"
  "est\032\030.mcoptions.PriceResponse\022G\n\020PriceBa"
  "rrierCall\022\031.mcoptions.BarrierRequest\032\030.m"
  "coptions.PriceResponse\022F\n\017PriceBarrierPu"
  "t\022\031.mcoptions.BarrierRequest\032\030.mcoptions"
  ".PriceResponse\022I\n\021PriceLookbackCall\022\032.mc"
  "options.LookbackRequest\032\030.mcoptions.Pric"
  "eResponse\022H\n\020PriceLookbackPut\022\032.mcoption"
  "s.LookbackRequest\032\030.mcoptions.PriceRespo"
  "nse\022I\n\021PriceBermudanCall\022\032.mcoptions.Ber"
  "mudanRequest\032\030.mcoptions.PriceResponse\022H"
  "\n\020PriceBermudanPut\022\032.mcoptions.BermudanR"
  "equest\032\030.mcoptions.PriceResponse\022\?\n\nPric"
  "eBatch\022\027.mcoptions.BatchRequest\032\030.mcopti"
  "ons.BatchResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mcoptions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mcoptions_2eproto_sccs[10] = {
  &scc_info_AmericanRequest_mcoptions_2eproto.base,
  &scc_info_AsianRequest_mcoptions_2eproto.base,
  &scc_info_BarrierRequest_mcoptions_2eproto.base,
  &scc_info_BatchRequest_mcoptions_2eproto.base,
  &scc_info_BatchResponse_mcoptions_2eproto.base,
  &scc_info_BermudanRequest_mcoptions_2eproto.base,
  &scc_info_EuropeanRequest_mcoptions_2eproto.base,
  &scc_info_LookbackRequest_mcoptions_2eproto.base,
  &scc_info_PriceResponse_mcoptions_2eproto.base,
  &scc_info_SimulationConfig_mcoptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mcoptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mcoptions_2eproto = {
  false, false, descriptor_table_protodef_mcoptions_2eproto, "mcoptions.proto", 2705,
  &descriptor_table_mcoptions_2eproto_once, descriptor_table_mcoptions_2eproto_sccs, descriptor_table_mcoptions_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_mcoptions_2eproto::offsets,
  file_level_metadata_mcoptions_2eproto, 10, file_level_enum_descriptors_mcoptions_2eproto, file_level_service_descriptors_mcoptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mcoptions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mcoptions_2eproto)), true);
namespace mcoptions {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BarrierType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mcoptions_2eproto);
  return file_level_enum_descriptors_mcoptions_2eproto[0];
}
bool BarrierType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SimulationConfig::InitAsDefaultInstance() {
}
class SimulationConfig::_Internal {
 public:
};

SimulationConfig::SimulationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.SimulationConfig)
}
SimulationConfig::SimulationConfig(const SimulationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_simulations_, &from.num_simulations_,
    static_cast<size_t>(reinterpret_cast<char*>(&stratified_sampling_enabled_) -
    reinterpret_cast<char*>(&num_simulations_)) + sizeof(stratified_sampling_enabled_));
  // @@protoc_insertion_point(copy_constructor:mcoptions.SimulationConfig)
}

void SimulationConfig::SharedCtor() {
  ::memset(&num_simulations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stratified_sampling_enabled_) -
      reinterpret_cast<char*>(&num_simulations_)) + sizeof(stratified_sampling_enabled_));
}

SimulationConfig::~SimulationConfig() {
  // @@protoc_insertion_point(destructor:mcoptions.SimulationConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimulationConfig::ArenaDtor(void* object) {
  SimulationConfig* _this = reinterpret_cast< SimulationConfig* >(object);
  (void)_this;
}
void SimulationConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationConfig& SimulationConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationConfig_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void SimulationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.SimulationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_simulations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stratified_sampling_enabled_) -
      reinterpret_cast<char*>(&num_simulations_)) + sizeof(stratified_sampling_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 num_simulations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_simulations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool antithetic_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          antithetic_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool control_variates_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          control_variates_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stratified_sampling_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          stratified_sampling_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.SimulationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 num_simulations = 1;
  if (this->num_simulations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_num_simulations(), target);
  }

  // uint64 num_steps = 2;
  if (this->num_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num_steps(), target);
  }

  // uint64 seed = 3;
  if (this->seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seed(), target);
  }

  // bool antithetic_enabled = 4;
  if (this->antithetic_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_antithetic_enabled(), target);
  }

  // bool control_variates_enabled = 5;
  if (this->control_variates_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_control_variates_enabled(), target);
  }

  // bool stratified_sampling_enabled = 6;
  if (this->stratified_sampling_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_stratified_sampling_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.SimulationConfig)
  return target;
}

size_t SimulationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.SimulationConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 num_simulations = 1;
  if (this->num_simulations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_simulations());
  }

  // uint64 num_steps = 2;
  if (this->num_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_steps());
  }

  // uint64 seed = 3;
  if (this->seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seed());
  }

  // bool antithetic_enabled = 4;
  if (this->antithetic_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool control_variates_enabled = 5;
  if (this->control_variates_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool stratified_sampling_enabled = 6;
  if (this->stratified_sampling_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.SimulationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.SimulationConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.SimulationConfig)
    MergeFrom(*source);
  }
}

void SimulationConfig::MergeFrom(const SimulationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.SimulationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_simulations() != 0) {
    _internal_set_num_simulations(from._internal_num_simulations());
  }
  if (from.num_steps() != 0) {
    _internal_set_num_steps(from._internal_num_steps());
  }
  if (from.seed() != 0) {
    _internal_set_seed(from._internal_seed());
  }
  if (from.antithetic_enabled() != 0) {
    _internal_set_antithetic_enabled(from._internal_antithetic_enabled());
  }
  if (from.control_variates_enabled() != 0) {
    _internal_set_control_variates_enabled(from._internal_control_variates_enabled());
  }
  if (from.stratified_sampling_enabled() != 0) {
    _internal_set_stratified_sampling_enabled(from._internal_stratified_sampling_enabled());
  }
}

void SimulationConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.SimulationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationConfig::CopyFrom(const SimulationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.SimulationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationConfig::IsInitialized() const {
  return true;
}

void SimulationConfig::InternalSwap(SimulationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationConfig, stratified_sampling_enabled_)
      + sizeof(SimulationConfig::stratified_sampling_enabled_)
      - PROTOBUF_FIELD_OFFSET(SimulationConfig, num_simulations_)>(
          reinterpret_cast<char*>(&num_simulations_),
          reinterpret_cast<char*>(&other->num_simulations_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EuropeanRequest::InitAsDefaultInstance() {
  ::mcoptions::_EuropeanRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::mcoptions::SimulationConfig*>(
      ::mcoptions::SimulationConfig::internal_default_instance());
}
class EuropeanRequest::_Internal {
 public:
  static const ::mcoptions::SimulationConfig& config(const EuropeanRequest* msg);
};

const ::mcoptions::SimulationConfig&
EuropeanRequest::_Internal::config(const EuropeanRequest* msg) {
  return *msg->config_;
}
EuropeanRequest::EuropeanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.EuropeanRequest)
}
EuropeanRequest::EuropeanRequest(const EuropeanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::mcoptions::SimulationConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&spot_, &from.spot_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_to_maturity_) -
    reinterpret_cast<char*>(&spot_)) + sizeof(time_to_maturity_));
  // @@protoc_insertion_point(copy_constructor:mcoptions.EuropeanRequest)
}

void EuropeanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EuropeanRequest_mcoptions_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_to_maturity_) -
      reinterpret_cast<char*>(&config_)) + sizeof(time_to_maturity_));
}

EuropeanRequest::~EuropeanRequest() {
  // @@protoc_insertion_point(destructor:mcoptions.EuropeanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EuropeanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void EuropeanRequest::ArenaDtor(void* object) {
  EuropeanRequest* _this = reinterpret_cast< EuropeanRequest* >(object);
  (void)_this;
}
void EuropeanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EuropeanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EuropeanRequest& EuropeanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EuropeanRequest_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void EuropeanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.EuropeanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&spot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_to_maturity_) -
      reinterpret_cast<char*>(&spot_)) + sizeof(time_to_maturity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EuropeanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double spot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          spot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double strike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          strike_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double volatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time_to_maturity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          time_to_maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .mcoptions.SimulationConfig config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EuropeanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.EuropeanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_spot(), target);
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_strike(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_volatility(), target);
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time_to_maturity(), target);
  }

  // .mcoptions.SimulationConfig config = 6;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.EuropeanRequest)
  return target;
}

size_t EuropeanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.EuropeanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mcoptions.SimulationConfig config = 6;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    total_size += 1 + 8;
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    total_size += 1 + 8;
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EuropeanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.EuropeanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EuropeanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EuropeanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.EuropeanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.EuropeanRequest)
    MergeFrom(*source);
  }
}

void EuropeanRequest::MergeFrom(const EuropeanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.EuropeanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::mcoptions::SimulationConfig::MergeFrom(from._internal_config());
  }
  if (!(from.spot() <= 0 && from.spot() >= 0)) {
    _internal_set_spot(from._internal_spot());
  }
  if (!(from.strike() <= 0 && from.strike() >= 0)) {
    _internal_set_strike(from._internal_strike());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.volatility() <= 0 && from.volatility() >= 0)) {
    _internal_set_volatility(from._internal_volatility());
  }
  if (!(from.time_to_maturity() <= 0 && from.time_to_maturity() >= 0)) {
    _internal_set_time_to_maturity(from._internal_time_to_maturity());
  }
}

void EuropeanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.EuropeanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EuropeanRequest::CopyFrom(const EuropeanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.EuropeanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EuropeanRequest::IsInitialized() const {
  return true;
}

void EuropeanRequest::InternalSwap(EuropeanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EuropeanRequest, time_to_maturity_)
      + sizeof(EuropeanRequest::time_to_maturity_)
      - PROTOBUF_FIELD_OFFSET(EuropeanRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EuropeanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmericanRequest::InitAsDefaultInstance() {
  ::mcoptions::_AmericanRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::mcoptions::SimulationConfig*>(
      ::mcoptions::SimulationConfig::internal_default_instance());
}
class AmericanRequest::_Internal {
 public:
  static const ::mcoptions::SimulationConfig& config(const AmericanRequest* msg);
};

const ::mcoptions::SimulationConfig&
AmericanRequest::_Internal::config(const AmericanRequest* msg) {
  return *msg->config_;
}
AmericanRequest::AmericanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.AmericanRequest)
}
AmericanRequest::AmericanRequest(const AmericanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::mcoptions::SimulationConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&spot_, &from.spot_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_exercise_points_) -
    reinterpret_cast<char*>(&spot_)) + sizeof(num_exercise_points_));
  // @@protoc_insertion_point(copy_constructor:mcoptions.AmericanRequest)
}

void AmericanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AmericanRequest_mcoptions_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_exercise_points_) -
      reinterpret_cast<char*>(&config_)) + sizeof(num_exercise_points_));
}

AmericanRequest::~AmericanRequest() {
  // @@protoc_insertion_point(destructor:mcoptions.AmericanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AmericanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void AmericanRequest::ArenaDtor(void* object) {
  AmericanRequest* _this = reinterpret_cast< AmericanRequest* >(object);
  (void)_this;
}
void AmericanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AmericanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmericanRequest& AmericanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmericanRequest_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void AmericanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.AmericanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&spot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_exercise_points_) -
      reinterpret_cast<char*>(&spot_)) + sizeof(num_exercise_points_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AmericanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double spot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          spot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double strike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          strike_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double volatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time_to_maturity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          time_to_maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 num_exercise_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_exercise_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcoptions.SimulationConfig config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmericanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.AmericanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_spot(), target);
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_strike(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_volatility(), target);
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time_to_maturity(), target);
  }

  // uint32 num_exercise_points = 6;
  if (this->num_exercise_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_exercise_points(), target);
  }

  // .mcoptions.SimulationConfig config = 7;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.AmericanRequest)
  return target;
}

size_t AmericanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.AmericanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mcoptions.SimulationConfig config = 7;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    total_size += 1 + 8;
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    total_size += 1 + 8;
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 num_exercise_points = 6;
  if (this->num_exercise_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_exercise_points());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmericanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.AmericanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AmericanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmericanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.AmericanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.AmericanRequest)
    MergeFrom(*source);
  }
}

void AmericanRequest::MergeFrom(const AmericanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.AmericanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::mcoptions::SimulationConfig::MergeFrom(from._internal_config());
  }
  if (!(from.spot() <= 0 && from.spot() >= 0)) {
    _internal_set_spot(from._internal_spot());
  }
  if (!(from.strike() <= 0 && from.strike() >= 0)) {
    _internal_set_strike(from._internal_strike());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.volatility() <= 0 && from.volatility() >= 0)) {
    _internal_set_volatility(from._internal_volatility());
  }
  if (!(from.time_to_maturity() <= 0 && from.time_to_maturity() >= 0)) {
    _internal_set_time_to_maturity(from._internal_time_to_maturity());
  }
  if (from.num_exercise_points() != 0) {
    _internal_set_num_exercise_points(from._internal_num_exercise_points());
  }
}

void AmericanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.AmericanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmericanRequest::CopyFrom(const AmericanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.AmericanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmericanRequest::IsInitialized() const {
  return true;
}

void AmericanRequest::InternalSwap(AmericanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AmericanRequest, num_exercise_points_)
      + sizeof(AmericanRequest::num_exercise_points_)
      - PROTOBUF_FIELD_OFFSET(AmericanRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AmericanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsianRequest::InitAsDefaultInstance() {
  ::mcoptions::_AsianRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::mcoptions::SimulationConfig*>(
      ::mcoptions::SimulationConfig::internal_default_instance());
}
class AsianRequest::_Internal {
 public:
  static const ::mcoptions::SimulationConfig& config(const AsianRequest* msg);
};

const ::mcoptions::SimulationConfig&
AsianRequest::_Internal::config(const AsianRequest* msg) {
  return *msg->config_;
}
AsianRequest::AsianRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.AsianRequest)
}
AsianRequest::AsianRequest(const AsianRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::mcoptions::SimulationConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&spot_, &from.spot_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_observations_) -
    reinterpret_cast<char*>(&spot_)) + sizeof(num_observations_));
  // @@protoc_insertion_point(copy_constructor:mcoptions.AsianRequest)
}

void AsianRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsianRequest_mcoptions_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_observations_) -
      reinterpret_cast<char*>(&config_)) + sizeof(num_observations_));
}

AsianRequest::~AsianRequest() {
  // @@protoc_insertion_point(destructor:mcoptions.AsianRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsianRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void AsianRequest::ArenaDtor(void* object) {
  AsianRequest* _this = reinterpret_cast< AsianRequest* >(object);
  (void)_this;
}
void AsianRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsianRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsianRequest& AsianRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsianRequest_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void AsianRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.AsianRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&spot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_observations_) -
      reinterpret_cast<char*>(&spot_)) + sizeof(num_observations_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsianRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double spot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          spot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double strike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          strike_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double volatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time_to_maturity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          time_to_maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 num_observations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_observations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcoptions.SimulationConfig config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsianRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.AsianRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_spot(), target);
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_strike(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_volatility(), target);
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time_to_maturity(), target);
  }

  // uint32 num_observations = 6;
  if (this->num_observations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_observations(), target);
  }

  // .mcoptions.SimulationConfig config = 7;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.AsianRequest)
  return target;
}

size_t AsianRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.AsianRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mcoptions.SimulationConfig config = 7;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    total_size += 1 + 8;
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    total_size += 1 + 8;
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 num_observations = 6;
  if (this->num_observations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_observations());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsianRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.AsianRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AsianRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsianRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.AsianRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.AsianRequest)
    MergeFrom(*source);
  }
}

void AsianRequest::MergeFrom(const AsianRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.AsianRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::mcoptions::SimulationConfig::MergeFrom(from._internal_config());
  }
  if (!(from.spot() <= 0 && from.spot() >= 0)) {
    _internal_set_spot(from._internal_spot());
  }
  if (!(from.strike() <= 0 && from.strike() >= 0)) {
    _internal_set_strike(from._internal_strike());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.volatility() <= 0 && from.volatility() >= 0)) {
    _internal_set_volatility(from._internal_volatility());
  }
  if (!(from.time_to_maturity() <= 0 && from.time_to_maturity() >= 0)) {
    _internal_set_time_to_maturity(from._internal_time_to_maturity());
  }
  if (from.num_observations() != 0) {
    _internal_set_num_observations(from._internal_num_observations());
  }
}

void AsianRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.AsianRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsianRequest::CopyFrom(const AsianRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.AsianRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsianRequest::IsInitialized() const {
  return true;
}

void AsianRequest::InternalSwap(AsianRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsianRequest, num_observations_)
      + sizeof(AsianRequest::num_observations_)
      - PROTOBUF_FIELD_OFFSET(AsianRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AsianRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BarrierRequest::InitAsDefaultInstance() {
  ::mcoptions::_BarrierRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::mcoptions::SimulationConfig*>(
      ::mcoptions::SimulationConfig::internal_default_instance());
}
class BarrierRequest::_Internal {
 public:
  static const ::mcoptions::SimulationConfig& config(const BarrierRequest* msg);
};

const ::mcoptions::SimulationConfig&
BarrierRequest::_Internal::config(const BarrierRequest* msg) {
  return *msg->config_;
}
BarrierRequest::BarrierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.BarrierRequest)
}
BarrierRequest::BarrierRequest(const BarrierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::mcoptions::SimulationConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&spot_, &from.spot_,
    static_cast<size_t>(reinterpret_cast<char*>(&barrier_type_) -
    reinterpret_cast<char*>(&spot_)) + sizeof(barrier_type_));
  // @@protoc_insertion_point(copy_constructor:mcoptions.BarrierRequest)
}

void BarrierRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BarrierRequest_mcoptions_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barrier_type_) -
      reinterpret_cast<char*>(&config_)) + sizeof(barrier_type_));
}

BarrierRequest::~BarrierRequest() {
  // @@protoc_insertion_point(destructor:mcoptions.BarrierRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BarrierRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void BarrierRequest::ArenaDtor(void* object) {
  BarrierRequest* _this = reinterpret_cast< BarrierRequest* >(object);
  (void)_this;
}
void BarrierRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BarrierRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BarrierRequest& BarrierRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BarrierRequest_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void BarrierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.BarrierRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&spot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barrier_type_) -
      reinterpret_cast<char*>(&spot_)) + sizeof(barrier_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BarrierRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double spot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          spot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double strike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          strike_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double volatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time_to_maturity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          time_to_maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double barrier_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          barrier_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .mcoptions.BarrierType barrier_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_barrier_type(static_cast<::mcoptions::BarrierType>(val));
        } else goto handle_unusual;
        continue;
      // double rebate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          rebate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .mcoptions.SimulationConfig config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarrierRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.BarrierRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_spot(), target);
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_strike(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_volatility(), target);
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time_to_maturity(), target);
  }

  // double barrier_level = 6;
  if (!(this->barrier_level() <= 0 && this->barrier_level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_barrier_level(), target);
  }

  // .mcoptions.BarrierType barrier_type = 7;
  if (this->barrier_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_barrier_type(), target);
  }

  // double rebate = 8;
  if (!(this->rebate() <= 0 && this->rebate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_rebate(), target);
  }

  // .mcoptions.SimulationConfig config = 9;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.BarrierRequest)
  return target;
}

size_t BarrierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.BarrierRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mcoptions.SimulationConfig config = 9;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    total_size += 1 + 8;
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    total_size += 1 + 8;
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    total_size += 1 + 8;
  }

  // double barrier_level = 6;
  if (!(this->barrier_level() <= 0 && this->barrier_level() >= 0)) {
    total_size += 1 + 8;
  }

  // double rebate = 8;
  if (!(this->rebate() <= 0 && this->rebate() >= 0)) {
    total_size += 1 + 8;
  }

  // .mcoptions.BarrierType barrier_type = 7;
  if (this->barrier_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_barrier_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarrierRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.BarrierRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BarrierRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BarrierRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.BarrierRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.BarrierRequest)
    MergeFrom(*source);
  }
}

void BarrierRequest::MergeFrom(const BarrierRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.BarrierRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::mcoptions::SimulationConfig::MergeFrom(from._internal_config());
  }
  if (!(from.spot() <= 0 && from.spot() >= 0)) {
    _internal_set_spot(from._internal_spot());
  }
  if (!(from.strike() <= 0 && from.strike() >= 0)) {
    _internal_set_strike(from._internal_strike());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.volatility() <= 0 && from.volatility() >= 0)) {
    _internal_set_volatility(from._internal_volatility());
  }
  if (!(from.time_to_maturity() <= 0 && from.time_to_maturity() >= 0)) {
    _internal_set_time_to_maturity(from._internal_time_to_maturity());
  }
  if (!(from.barrier_level() <= 0 && from.barrier_level() >= 0)) {
    _internal_set_barrier_level(from._internal_barrier_level());
  }
  if (!(from.rebate() <= 0 && from.rebate() >= 0)) {
    _internal_set_rebate(from._internal_rebate());
  }
  if (from.barrier_type() != 0) {
    _internal_set_barrier_type(from._internal_barrier_type());
  }
}

void BarrierRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.BarrierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarrierRequest::CopyFrom(const BarrierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.BarrierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrierRequest::IsInitialized() const {
  return true;
}

void BarrierRequest::InternalSwap(BarrierRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BarrierRequest, barrier_type_)
      + sizeof(BarrierRequest::barrier_type_)
      - PROTOBUF_FIELD_OFFSET(BarrierRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BarrierRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LookbackRequest::InitAsDefaultInstance() {
  ::mcoptions::_LookbackRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::mcoptions::SimulationConfig*>(
      ::mcoptions::SimulationConfig::internal_default_instance());
}
class LookbackRequest::_Internal {
 public:
  static const ::mcoptions::SimulationConfig& config(const LookbackRequest* msg);
};

const ::mcoptions::SimulationConfig&
LookbackRequest::_Internal::config(const LookbackRequest* msg) {
  return *msg->config_;
}
LookbackRequest::LookbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.LookbackRequest)
}
LookbackRequest::LookbackRequest(const LookbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::mcoptions::SimulationConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&spot_, &from.spot_,
    static_cast<size_t>(reinterpret_cast<char*>(&fixed_strike_) -
    reinterpret_cast<char*>(&spot_)) + sizeof(fixed_strike_));
  // @@protoc_insertion_point(copy_constructor:mcoptions.LookbackRequest)
}

void LookbackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookbackRequest_mcoptions_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed_strike_) -
      reinterpret_cast<char*>(&config_)) + sizeof(fixed_strike_));
}

LookbackRequest::~LookbackRequest() {
  // @@protoc_insertion_point(destructor:mcoptions.LookbackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LookbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void LookbackRequest::ArenaDtor(void* object) {
  LookbackRequest* _this = reinterpret_cast< LookbackRequest* >(object);
  (void)_this;
}
void LookbackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookbackRequest& LookbackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookbackRequest_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void LookbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.LookbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&spot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed_strike_) -
      reinterpret_cast<char*>(&spot_)) + sizeof(fixed_strike_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double spot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          spot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double strike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          strike_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double volatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time_to_maturity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          time_to_maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool fixed_strike = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fixed_strike_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcoptions.SimulationConfig config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookbackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.LookbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_spot(), target);
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_strike(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_volatility(), target);
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time_to_maturity(), target);
  }

  // bool fixed_strike = 6;
  if (this->fixed_strike() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_fixed_strike(), target);
  }

  // .mcoptions.SimulationConfig config = 7;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.LookbackRequest)
  return target;
}

size_t LookbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.LookbackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mcoptions.SimulationConfig config = 7;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    total_size += 1 + 8;
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    total_size += 1 + 8;
  }

  // double time_to_maturity = 5;
  if (!(this->time_to_maturity() <= 0 && this->time_to_maturity() >= 0)) {
    total_size += 1 + 8;
  }

  // bool fixed_strike = 6;
  if (this->fixed_strike() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookbackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.LookbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LookbackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LookbackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.LookbackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.LookbackRequest)
    MergeFrom(*source);
  }
}

void LookbackRequest::MergeFrom(const LookbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.LookbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::mcoptions::SimulationConfig::MergeFrom(from._internal_config());
  }
  if (!(from.spot() <= 0 && from.spot() >= 0)) {
    _internal_set_spot(from._internal_spot());
  }
  if (!(from.strike() <= 0 && from.strike() >= 0)) {
    _internal_set_strike(from._internal_strike());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.volatility() <= 0 && from.volatility() >= 0)) {
    _internal_set_volatility(from._internal_volatility());
  }
  if (!(from.time_to_maturity() <= 0 && from.time_to_maturity() >= 0)) {
    _internal_set_time_to_maturity(from._internal_time_to_maturity());
  }
  if (from.fixed_strike() != 0) {
    _internal_set_fixed_strike(from._internal_fixed_strike());
  }
}

void LookbackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.LookbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookbackRequest::CopyFrom(const LookbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.LookbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookbackRequest::IsInitialized() const {
  return true;
}

void LookbackRequest::InternalSwap(LookbackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookbackRequest, fixed_strike_)
      + sizeof(LookbackRequest::fixed_strike_)
      - PROTOBUF_FIELD_OFFSET(LookbackRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LookbackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BermudanRequest::InitAsDefaultInstance() {
  ::mcoptions::_BermudanRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::mcoptions::SimulationConfig*>(
      ::mcoptions::SimulationConfig::internal_default_instance());
}
class BermudanRequest::_Internal {
 public:
  static const ::mcoptions::SimulationConfig& config(const BermudanRequest* msg);
};

const ::mcoptions::SimulationConfig&
BermudanRequest::_Internal::config(const BermudanRequest* msg) {
  return *msg->config_;
}
BermudanRequest::BermudanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  exercise_dates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.BermudanRequest)
}
BermudanRequest::BermudanRequest(const BermudanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      exercise_dates_(from.exercise_dates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::mcoptions::SimulationConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&spot_, &from.spot_,
    static_cast<size_t>(reinterpret_cast<char*>(&volatility_) -
    reinterpret_cast<char*>(&spot_)) + sizeof(volatility_));
  // @@protoc_insertion_point(copy_constructor:mcoptions.BermudanRequest)
}

void BermudanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BermudanRequest_mcoptions_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volatility_) -
      reinterpret_cast<char*>(&config_)) + sizeof(volatility_));
}

BermudanRequest::~BermudanRequest() {
  // @@protoc_insertion_point(destructor:mcoptions.BermudanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BermudanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void BermudanRequest::ArenaDtor(void* object) {
  BermudanRequest* _this = reinterpret_cast< BermudanRequest* >(object);
  (void)_this;
}
void BermudanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BermudanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BermudanRequest& BermudanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BermudanRequest_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void BermudanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.BermudanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exercise_dates_.Clear();
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&spot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volatility_) -
      reinterpret_cast<char*>(&spot_)) + sizeof(volatility_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BermudanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double spot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          spot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double strike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          strike_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double volatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double exercise_dates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_exercise_dates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_exercise_dates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .mcoptions.SimulationConfig config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BermudanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.BermudanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_spot(), target);
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_strike(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_volatility(), target);
  }

  // repeated double exercise_dates = 5;
  if (this->_internal_exercise_dates_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_exercise_dates(), target);
  }

  // .mcoptions.SimulationConfig config = 6;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.BermudanRequest)
  return target;
}

size_t BermudanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.BermudanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double exercise_dates = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_exercise_dates_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _exercise_dates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .mcoptions.SimulationConfig config = 6;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // double spot = 1;
  if (!(this->spot() <= 0 && this->spot() >= 0)) {
    total_size += 1 + 8;
  }

  // double strike = 2;
  if (!(this->strike() <= 0 && this->strike() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double volatility = 4;
  if (!(this->volatility() <= 0 && this->volatility() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BermudanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.BermudanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BermudanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BermudanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.BermudanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.BermudanRequest)
    MergeFrom(*source);
  }
}

void BermudanRequest::MergeFrom(const BermudanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.BermudanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exercise_dates_.MergeFrom(from.exercise_dates_);
  if (from.has_config()) {
    _internal_mutable_config()->::mcoptions::SimulationConfig::MergeFrom(from._internal_config());
  }
  if (!(from.spot() <= 0 && from.spot() >= 0)) {
    _internal_set_spot(from._internal_spot());
  }
  if (!(from.strike() <= 0 && from.strike() >= 0)) {
    _internal_set_strike(from._internal_strike());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.volatility() <= 0 && from.volatility() >= 0)) {
    _internal_set_volatility(from._internal_volatility());
  }
}

void BermudanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.BermudanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BermudanRequest::CopyFrom(const BermudanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.BermudanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BermudanRequest::IsInitialized() const {
  return true;
}

void BermudanRequest::InternalSwap(BermudanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  exercise_dates_.InternalSwap(&other->exercise_dates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BermudanRequest, volatility_)
      + sizeof(BermudanRequest::volatility_)
      - PROTOBUF_FIELD_OFFSET(BermudanRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BermudanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriceResponse::InitAsDefaultInstance() {
}
class PriceResponse::_Internal {
 public:
};

PriceResponse::PriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.PriceResponse)
}
PriceResponse::PriceResponse(const PriceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&computation_time_ms_) -
    reinterpret_cast<char*>(&price_)) + sizeof(computation_time_ms_));
  // @@protoc_insertion_point(copy_constructor:mcoptions.PriceResponse)
}

void PriceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceResponse_mcoptions_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&computation_time_ms_) -
      reinterpret_cast<char*>(&price_)) + sizeof(computation_time_ms_));
}

PriceResponse::~PriceResponse() {
  // @@protoc_insertion_point(destructor:mcoptions.PriceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PriceResponse::ArenaDtor(void* object) {
  PriceResponse* _this = reinterpret_cast< PriceResponse* >(object);
  (void)_this;
}
void PriceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceResponse& PriceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceResponse_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void PriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.PriceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&computation_time_ms_) -
      reinterpret_cast<char*>(&price_)) + sizeof(computation_time_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double computation_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          computation_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcoptions.PriceResponse.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.PriceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_price(), target);
  }

  // double computation_time_ms = 2;
  if (!(this->computation_time_ms() <= 0 && this->computation_time_ms() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_computation_time_ms(), target);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcoptions.PriceResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.PriceResponse)
  return target;
}

size_t PriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.PriceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // double computation_time_ms = 2;
  if (!(this->computation_time_ms() <= 0 && this->computation_time_ms() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.PriceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.PriceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.PriceResponse)
    MergeFrom(*source);
  }
}

void PriceResponse::MergeFrom(const PriceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.PriceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.computation_time_ms() <= 0 && from.computation_time_ms() >= 0)) {
    _internal_set_computation_time_ms(from._internal_computation_time_ms());
  }
}

void PriceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.PriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceResponse::CopyFrom(const PriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.PriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceResponse::IsInitialized() const {
  return true;
}

void PriceResponse::InternalSwap(PriceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceResponse, computation_time_ms_)
      + sizeof(PriceResponse::computation_time_ms_)
      - PROTOBUF_FIELD_OFFSET(PriceResponse, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchRequest::InitAsDefaultInstance() {
  ::mcoptions::_BatchRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::mcoptions::SimulationConfig*>(
      ::mcoptions::SimulationConfig::internal_default_instance());
}
class BatchRequest::_Internal {
 public:
  static const ::mcoptions::SimulationConfig& config(const BatchRequest* msg);
};

const ::mcoptions::SimulationConfig&
BatchRequest::_Internal::config(const BatchRequest* msg) {
  return *msg->config_;
}
BatchRequest::BatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  european_calls_(arena),
  european_puts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.BatchRequest)
}
BatchRequest::BatchRequest(const BatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      european_calls_(from.european_calls_),
      european_puts_(from.european_puts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::mcoptions::SimulationConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mcoptions.BatchRequest)
}

void BatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchRequest_mcoptions_2eproto.base);
  config_ = nullptr;
}

BatchRequest::~BatchRequest() {
  // @@protoc_insertion_point(destructor:mcoptions.BatchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void BatchRequest::ArenaDtor(void* object) {
  BatchRequest* _this = reinterpret_cast< BatchRequest* >(object);
  (void)_this;
}
void BatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRequest& BatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchRequest_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void BatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.BatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  european_calls_.Clear();
  european_puts_.Clear();
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mcoptions.EuropeanRequest european_calls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_european_calls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mcoptions.EuropeanRequest european_puts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_european_puts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .mcoptions.SimulationConfig config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.BatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcoptions.EuropeanRequest european_calls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_european_calls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_european_calls(i), target, stream);
  }

  // repeated .mcoptions.EuropeanRequest european_puts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_european_puts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_european_puts(i), target, stream);
  }

  // .mcoptions.SimulationConfig config = 3;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.BatchRequest)
  return target;
}

size_t BatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.BatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcoptions.EuropeanRequest european_calls = 1;
  total_size += 1UL * this->_internal_european_calls_size();
  for (const auto& msg : this->european_calls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mcoptions.EuropeanRequest european_puts = 2;
  total_size += 1UL * this->_internal_european_puts_size();
  for (const auto& msg : this->european_puts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mcoptions.SimulationConfig config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.BatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.BatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.BatchRequest)
    MergeFrom(*source);
  }
}

void BatchRequest::MergeFrom(const BatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.BatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  european_calls_.MergeFrom(from.european_calls_);
  european_puts_.MergeFrom(from.european_puts_);
  if (from.has_config()) {
    _internal_mutable_config()->::mcoptions::SimulationConfig::MergeFrom(from._internal_config());
  }
}

void BatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.BatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRequest::CopyFrom(const BatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.BatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRequest::IsInitialized() const {
  return true;
}

void BatchRequest::InternalSwap(BatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  european_calls_.InternalSwap(&other->european_calls_);
  european_puts_.InternalSwap(&other->european_puts_);
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchResponse::InitAsDefaultInstance() {
}
class BatchResponse::_Internal {
 public:
};

BatchResponse::BatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  european_call_prices_(arena),
  european_put_prices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mcoptions.BatchResponse)
}
BatchResponse::BatchResponse(const BatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      european_call_prices_(from.european_call_prices_),
      european_put_prices_(from.european_put_prices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_computation_time_ms_ = from.total_computation_time_ms_;
  // @@protoc_insertion_point(copy_constructor:mcoptions.BatchResponse)
}

void BatchResponse::SharedCtor() {
  total_computation_time_ms_ = 0;
}

BatchResponse::~BatchResponse() {
  // @@protoc_insertion_point(destructor:mcoptions.BatchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BatchResponse::ArenaDtor(void* object) {
  BatchResponse* _this = reinterpret_cast< BatchResponse* >(object);
  (void)_this;
}
void BatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchResponse& BatchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchResponse_mcoptions_2eproto.base);
  return *internal_default_instance();
}


void BatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mcoptions.BatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  european_call_prices_.Clear();
  european_put_prices_.Clear();
  total_computation_time_ms_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double european_call_prices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_european_call_prices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_european_call_prices(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double european_put_prices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_european_put_prices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_european_put_prices(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_computation_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          total_computation_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcoptions.BatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double european_call_prices = 1;
  if (this->_internal_european_call_prices_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_european_call_prices(), target);
  }

  // repeated double european_put_prices = 2;
  if (this->_internal_european_put_prices_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_european_put_prices(), target);
  }

  // double total_computation_time_ms = 3;
  if (!(this->total_computation_time_ms() <= 0 && this->total_computation_time_ms() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_total_computation_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcoptions.BatchResponse)
  return target;
}

size_t BatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcoptions.BatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double european_call_prices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_european_call_prices_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _european_call_prices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double european_put_prices = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_european_put_prices_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _european_put_prices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double total_computation_time_ms = 3;
  if (!(this->total_computation_time_ms() <= 0 && this->total_computation_time_ms() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcoptions.BatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcoptions.BatchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcoptions.BatchResponse)
    MergeFrom(*source);
  }
}

void BatchResponse::MergeFrom(const BatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcoptions.BatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  european_call_prices_.MergeFrom(from.european_call_prices_);
  european_put_prices_.MergeFrom(from.european_put_prices_);
  if (!(from.total_computation_time_ms() <= 0 && from.total_computation_time_ms() >= 0)) {
    _internal_set_total_computation_time_ms(from._internal_total_computation_time_ms());
  }
}

void BatchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcoptions.BatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchResponse::CopyFrom(const BatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcoptions.BatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchResponse::IsInitialized() const {
  return true;
}

void BatchResponse::InternalSwap(BatchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  european_call_prices_.InternalSwap(&other->european_call_prices_);
  european_put_prices_.InternalSwap(&other->european_put_prices_);
  swap(total_computation_time_ms_, other->total_computation_time_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mcoptions
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mcoptions::SimulationConfig* Arena::CreateMaybeMessage< ::mcoptions::SimulationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::SimulationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::mcoptions::EuropeanRequest* Arena::CreateMaybeMessage< ::mcoptions::EuropeanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::EuropeanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcoptions::AmericanRequest* Arena::CreateMaybeMessage< ::mcoptions::AmericanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::AmericanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcoptions::AsianRequest* Arena::CreateMaybeMessage< ::mcoptions::AsianRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::AsianRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcoptions::BarrierRequest* Arena::CreateMaybeMessage< ::mcoptions::BarrierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::BarrierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcoptions::LookbackRequest* Arena::CreateMaybeMessage< ::mcoptions::LookbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::LookbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcoptions::BermudanRequest* Arena::CreateMaybeMessage< ::mcoptions::BermudanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::BermudanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcoptions::PriceResponse* Arena::CreateMaybeMessage< ::mcoptions::PriceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::PriceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcoptions::BatchRequest* Arena::CreateMaybeMessage< ::mcoptions::BatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::BatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mcoptions::BatchResponse* Arena::CreateMaybeMessage< ::mcoptions::BatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcoptions::BatchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
